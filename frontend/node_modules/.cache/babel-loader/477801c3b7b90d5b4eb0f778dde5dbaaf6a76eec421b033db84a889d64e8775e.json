{"ast":null,"code":"/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\nvar SelectionCommands = /** @class */function () {\n  function SelectionCommands() {}\n  /**\n   * applyFormat method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {string} format - specifies the string value\n   * @param {Node} endNode - specifies the end node\n   * @param {string} enterAction - specifies the enter key action\n   * @param {string} value - specifies the string value\n   * @param {string} selector - specifies the string\n   * @returns {void}\n   * @hidden\n    */\n  SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, value, selector) {\n    this.enterAction = enterAction;\n    var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n    if (validFormats.indexOf(format) > -1) {\n      if (format === 'backgroundcolor' && value === '') {\n        value = 'transparent';\n      }\n      var domSelection = new NodeSelection();\n      var domNode = new DOMNode(endNode, docElement);\n      var nodeCutter = new NodeCutter();\n      var isFormatted = new IsFormatted();\n      var range = domSelection.getRange(docElement);\n      var save = domSelection.save(range, docElement);\n      var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);\n      var isCollapsed = false;\n      var isFormat = false;\n      var isCursor = false;\n      var preventRestore = false;\n      var isFontStyle = ['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1;\n      if (range.collapsed) {\n        if (nodes.length > 0) {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n        } else if (range.startContainer.nodeType === 3 && range.startContainer.parentElement.childElementCount > 0 && range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') {\n          isCollapsed = true;\n          range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n          nodes.push(range.startContainer);\n        } else {\n          var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n          domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n          var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n          if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n            domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n            preventRestore = true;\n          } else {\n            domSelection.endOffset = domSelection.startOffset = 1;\n          }\n          if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n            preventRestore = true;\n          }\n        }\n      }\n      isCursor = range.collapsed;\n      var isSubSup = false;\n      for (var index = 0; index < nodes.length; index++) {\n        var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n        if (formatNode === null) {\n          if (format === 'subscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          } else if (format === 'superscript') {\n            formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n            isSubSup = formatNode === null ? false : true;\n          }\n        }\n        if (index === 0 && formatNode === null) {\n          isFormat = true;\n        }\n        if (formatNode !== null && (!isFormat || isFontStyle)) {\n          nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n        } else {\n          nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);\n        }\n        domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n      }\n      if (isIDevice()) {\n        setEditFrameFocus(endNode, selector);\n      }\n      if (!preventRestore) {\n        save.restore();\n      }\n      if (isSubSup) {\n        this.applyFormat(docElement, format, endNode, enterAction);\n      }\n    }\n  };\n  SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n    var cursorNodes = domSelection.getNodeCollection(range);\n    var domNode = new DOMNode(endNode, docElement);\n    var cursorFormat = cursorNodes.length > 0 ? cursorNodes.length > 1 && range.startContainer === range.endContainer ? this.getCursorFormat(isFormatted, cursorNodes, format, endNode) : isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n    var cursorNode = null;\n    if (cursorFormat) {\n      cursorNode = cursorNodes[0];\n      if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {\n        var isCursorEqual = false;\n        var regEx = new RegExp(String.fromCharCode(8203), 'g');\n        var emptySpaceNode = void 0;\n        if (cursorFormat.firstChild === cursorNode) {\n          cursorNode.textContent = cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) && cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 : cursorFormat.childElementCount === 0) && (cursorFormat.parentElement.textContent.length > 1 || cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ? cursorNode.textContent : cursorNode.textContent.replace(regEx, '');\n          emptySpaceNode = cursorNode;\n          isCursorEqual = true;\n        } else {\n          cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n          emptySpaceNode = cursorFormat.firstChild;\n        }\n        var pointer = void 0;\n        if (emptySpaceNode.textContent.length === 0) {\n          if (!isNOU(emptySpaceNode.previousSibling)) {\n            cursorNode = emptySpaceNode.previousSibling;\n            pointer = emptySpaceNode.textContent.length - 1;\n            domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n          } else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n            var brElem = document.createElement('BR');\n            emptySpaceNode.parentElement.appendChild(brElem);\n            detach(emptySpaceNode);\n            cursorNode = brElem;\n            domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n          }\n        }\n      }\n      if (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1) {\n        if (format === 'fontcolor') {\n          cursorFormat.style.color = value;\n        } else if (format === 'fontname') {\n          cursorFormat.style.fontFamily = value;\n        } else if (format === 'fontsize') {\n          cursorFormat.style.fontSize = value;\n        } else {\n          cursorFormat.style.backgroundColor = value;\n        }\n        cursorNode = cursorFormat;\n      } else {\n        InsertMethods.unwrap(cursorFormat);\n      }\n    } else {\n      if (cursorNodes.length > 1 && range.startOffset > 0 && cursorNodes[0].firstElementChild && cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br') {\n        cursorNodes[0].innerHTML = '';\n      }\n      if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' || cursorNodes[0].nextSibling.nodeName === 'BR')) {\n        detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n      }\n      cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n    }\n    return cursorNode;\n  };\n  SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n    var currentNode;\n    for (var index = 0; index < cursorNodes.length; index++) {\n      currentNode = cursorNodes[index].lastElementChild ? cursorNodes[index].lastElementChild : cursorNodes[index];\n    }\n    return isFormatted.getFormattedNode(currentNode, format, endNode);\n  };\n  SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n    var splitNode = null;\n    var startText = range.startContainer.nodeName === '#text' ? range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) : range.startContainer.textContent;\n    if (!(range.startContainer === range.endContainer && range.startOffset === 0 && range.endOffset === range.startContainer.length)) {\n      var nodeIndex = [];\n      var cloneNode = nodes[index];\n      do {\n        nodeIndex.push(domSelection.getIndex(cloneNode));\n        cloneNode = cloneNode.parentNode;\n      } while (cloneNode && cloneNode !== formatNode);\n      if (nodes[index].nodeName !== 'BR') {\n        cloneNode = splitNode = isCursor && formatNode.textContent.length - 1 === range.startOffset ? nodeCutter.SplitNode(range, formatNode, true) : nodeCutter.GetSpliceNode(range, formatNode);\n      }\n      if (!isCursor) {\n        while (cloneNode && cloneNode.childNodes.length > 0 && nodeIndex.length - 1 >= 0 && cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1]) {\n          cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n          nodeIndex.pop();\n        }\n        if (nodes[index].nodeName !== 'BR') {\n          if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n            nodes[index] = cloneNode;\n          } else {\n            var divNode = document.createElement('div');\n            divNode.innerHTML = '&#8203;';\n            if (cloneNode.nodeType !== 3) {\n              cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n              nodes[index] = cloneNode.firstChild;\n            } else {\n              cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n              nodes[index] = cloneNode.previousSibling;\n              cloneNode.parentNode.removeChild(cloneNode);\n            }\n          }\n        }\n      } else {\n        var lastNode = splitNode;\n        for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n          lastNode = lastNode.firstChild;\n        }\n        lastNode.innerHTML = '&#8203;';\n        nodes[index] = lastNode.firstChild;\n      }\n    }\n    var fontStyle;\n    if (format === 'backgroundcolor') {\n      fontStyle = formatNode.style.fontSize;\n    }\n    var bgStyle;\n    if (format === 'fontsize') {\n      var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n      if (!isNOU(bg)) {\n        bgStyle = bg.style.backgroundColor;\n      }\n    }\n    var formatNodeStyles = formatNode.getAttribute('style');\n    var formatNodeTagName = formatNode.tagName;\n    var child = InsertMethods.unwrap(formatNode);\n    if (child[0] && !isFontStyle) {\n      var nodeTraverse = child[index] ? child[index] : child[0];\n      var textNode = nodeTraverse;\n      for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode;\n      // eslint-disable-next-line\n      nodeTraverse = nodeTraverse) {\n        if (nodeTraverse.parentElement && nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n          if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase()) {\n            if (range.startOffset === range.endOffset && textNode.nodeType !== 1 && !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n              range.setStart(textNode, 0);\n              range.setEnd(textNode, textNode.textContent.length);\n              nodeCutter.SplitNode(range, textNode.parentElement, false);\n            }\n          }\n          if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n            if (formatNode.style.textDecoration === 'underline' && nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n              nodeTraverse = nodeTraverse.parentElement;\n              continue;\n            }\n          }\n          InsertMethods.unwrap(nodeTraverse.parentElement);\n          nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode : nodeTraverse.parentElement;\n        } else {\n          nodeTraverse = nodeTraverse.parentElement;\n        }\n      }\n    }\n    if (child.length > 0 && isFontStyle) {\n      for (var num = 0; num < child.length; num++) {\n        if (child[num].nodeType !== 3 || child[num].textContent && child[num].textContent.trim().length > 0) {\n          child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n          if (child[num].textContent === startText) {\n            if (num === 0) {\n              range.setStartBefore(child[num]);\n            } else if (num === child.length - 1) {\n              range.setEndAfter(child[num]);\n            }\n          }\n        }\n      }\n      var currentNodeElem = nodes[index].parentElement;\n      if (!isNOU(fontStyle) && fontStyle !== '') {\n        currentNodeElem.style.fontSize = fontStyle;\n      }\n      if (!isNOU(bgStyle) && bgStyle !== '') {\n        currentNodeElem.style.backgroundColor = bgStyle;\n      }\n      if (format === 'backgroundcolor' && !isNOU(fontStyle) && fontStyle !== '' && currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n        var curParentElem = currentNodeElem.parentElement;\n        curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n        detach(curParentElem);\n      }\n      if (format === 'fontsize' || format === 'fontcolor') {\n        var liElement = nodes[index].parentElement;\n        var parentElement = nodes[index].parentElement;\n        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n          parentElement = parentElement.parentElement;\n          liElement = parentElement;\n        }\n        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n          if (format === 'fontsize') {\n            liElement.style.fontSize = value;\n          } else {\n            liElement.style.color = value;\n            liElement.style.textDecoration = 'inherit';\n          }\n        }\n      }\n    }\n    return nodes[index];\n  };\n  SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {\n    if (!isCursor) {\n      if (formatNode === null && isFormat || isFontStyle) {\n        if (nodes[index].nodeName !== 'BR') {\n          nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n          nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n        }\n        if (format === 'uppercase' || format === 'lowercase') {\n          nodes[index].textContent = format === 'uppercase' ? nodes[index].textContent.toLocaleUpperCase() : nodes[index].textContent.toLocaleLowerCase();\n        } else if (!(isFontStyle === true && value === '')) {\n          var element = this.GetFormatNode(format, value);\n          if (format === 'fontsize' || format === 'fontcolor') {\n            var liElement = nodes[index].parentElement;\n            var parentElement = nodes[index].parentElement;\n            while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n              parentElement = parentElement.parentElement;\n              liElement = parentElement;\n            }\n            if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n              if (format === 'fontsize') {\n                liElement.style.fontSize = value;\n              } else {\n                liElement.style.color = value;\n                liElement.style.textDecoration = 'inherit';\n              }\n            }\n            nodes[index] = this.applyStyles(nodes, index, element);\n            if (format === 'fontsize') {\n              var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n              if (!isNOU(bg)) {\n                nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor;\n              }\n            }\n          } else {\n            nodes[index] = this.applyStyles(nodes, index, element);\n          }\n        }\n      } else {\n        nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n      }\n    } else {\n      if (format !== 'uppercase' && format !== 'lowercase') {\n        var element = this.getInsertNode(docElement, range, format, value);\n        nodes[index] = element.firstChild;\n        nodeCutter.position = 1;\n      } else {\n        nodeCutter.position = range.startOffset;\n      }\n    }\n    return nodes[index];\n  };\n  SelectionCommands.applyStyles = function (nodes, index, element) {\n    if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n      nodes[index] = index === nodes.length - 1 || nodes[index].nodeName === 'BR' ? InsertMethods.Wrap(nodes[index], element) : InsertMethods.WrapBefore(nodes[index], element, true);\n      nodes[index] = this.getChildNode(nodes[index], element);\n    }\n    return nodes[index];\n  };\n  SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n    var element = this.GetFormatNode(format, value);\n    element.innerHTML = '&#8203;';\n    if (Browser.isIE) {\n      var frag = docElement.createDocumentFragment();\n      frag.appendChild(element);\n      range.insertNode(frag);\n    } else {\n      range.insertNode(element);\n    }\n    return element;\n  };\n  SelectionCommands.getChildNode = function (node, element) {\n    if (node === undefined || node === null) {\n      element.innerHTML = '&#8203;';\n      node = element.firstChild;\n    }\n    return node;\n  };\n  SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n    if (nodes.length === 1 && !isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = 0;\n      domSelection.endOffset = nodes[index].textContent.length;\n    } else if (nodes.length === 1 && isCollapsed) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.endContainer = domSelection.startContainer;\n      domSelection.startOffset = nodeCutter.position;\n      domSelection.endOffset = nodeCutter.position;\n    } else if (index === 0) {\n      domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n      domSelection.startOffset = 0;\n    } else if (index === nodes.length - 1) {\n      domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n      domSelection.endOffset = nodes[index].textContent.length;\n    }\n    return domSelection;\n  };\n  SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n    var node;\n    switch (format) {\n      case 'bold':\n        return document.createElement('strong');\n      case 'italic':\n        return document.createElement('em');\n      case 'underline':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'underline';\n        return node;\n      case 'strikethrough':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.textDecoration = 'line-through';\n        return node;\n      case 'superscript':\n        return document.createElement('sup');\n      case 'subscript':\n        return document.createElement('sub');\n      case 'fontcolor':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.color = value;\n        node.style.textDecoration = 'inherit';\n        return node;\n      case 'fontname':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontFamily = value;\n        return node;\n      case 'fontsize':\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.fontSize = value;\n        return node;\n      default:\n        node = document.createElement('span');\n        this.updateStyles(node, tagName, styles);\n        node.style.backgroundColor = value;\n        return node;\n    }\n  };\n  SelectionCommands.updateStyles = function (ele, tag, styles) {\n    if (styles !== null && tag === 'SPAN') {\n      ele.setAttribute('style', styles);\n    }\n  };\n  SelectionCommands.enterAction = 'P';\n  return SelectionCommands;\n}();\nexport { SelectionCommands };","map":{"version":3,"names":["NodeSelection","NodeCutter","InsertMethods","IsFormatted","isIDevice","setEditFrameFocus","isNullOrUndefined","isNOU","Browser","closest","detach","DOMNode","SelectionCommands","applyFormat","docElement","format","endNode","enterAction","value","selector","validFormats","indexOf","domSelection","domNode","nodeCutter","isFormatted","range","getRange","save","nodes","collapsed","getSelectionNodeCollection","getSelectionNodeCollectionBr","isCollapsed","isFormat","isCursor","preventRestore","isFontStyle","length","GetCursorRange","startContainer","nodeType","parentElement","childElementCount","startOffset","firstElementChild","tagName","toLowerCase","push","cursorNode","insertCursorNode","endContainer","getNodeArray","childNodes","nodeName","parentNode","setSelectionText","endOffset","textContent","isSubSup","index","formatNode","getFormattedNode","removeFormat","insertFormat","applySelection","restore","cursorNodes","getNodeCollection","cursorFormat","getCursorFormat","firstChild","charCodeAt","isCursorEqual","regEx","RegExp","String","fromCharCode","emptySpaceNode","isBlockNode","replace","pointer","previousSibling","setCursorPoint","brElem","document","createElement","appendChild","style","color","fontFamily","fontSize","backgroundColor","unwrap","innerHTML","nextSibling","getInsertNode","currentNode","lastElementChild","splitNode","startText","substring","nodeIndex","cloneNode","getIndex","SplitNode","GetSpliceNode","pop","nodeValue","divNode","insertBefore","removeChild","lastNode","fontStyle","bgStyle","bg","formatNodeStyles","getAttribute","formatNodeTagName","child","nodeTraverse","textNode","toLocaleLowerCase","setStart","setEnd","textDecoration","num","trim","Wrap","GetFormatNode","setStartBefore","setEndAfter","currentNodeElem","outerHTML","curParentElem","liElement","TrimLineBreak","toLocaleUpperCase","element","applyStyles","position","WrapBefore","getChildNode","isIE","frag","createDocumentFragment","insertNode","node","undefined","styles","updateStyles","ele","tag","setAttribute"],"sources":["D:/USPERSO IMPLEMENTATION/Projet_DevIII/frontend/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/selection-commands.js"],"sourcesContent":["/**\n * `Selection` module is used to handle RTE Selections.\n */\nimport { NodeSelection } from './../../selection/index';\nimport { NodeCutter } from './nodecutter';\nimport { InsertMethods } from './insert-methods';\nimport { IsFormatted } from './isformatted';\nimport { isIDevice, setEditFrameFocus } from '../../common/util';\nimport { isNullOrUndefined as isNOU, Browser, closest, detach } from '@syncfusion/ej2-base';\nimport { DOMNode } from './dom-node';\nvar SelectionCommands = /** @class */ (function () {\n    function SelectionCommands() {\n    }\n    /**\n     * applyFormat method\n     *\n     * @param {Document} docElement - specifies the document\n     * @param {string} format - specifies the string value\n     * @param {Node} endNode - specifies the end node\n     * @param {string} enterAction - specifies the enter key action\n     * @param {string} value - specifies the string value\n     * @param {string} selector - specifies the string\n     * @returns {void}\n     * @hidden\n\n     */\n    SelectionCommands.applyFormat = function (docElement, format, endNode, enterAction, value, selector) {\n        this.enterAction = enterAction;\n        var validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',\n            'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n        if (validFormats.indexOf(format) > -1) {\n            if (format === 'backgroundcolor' && value === '') {\n                value = 'transparent';\n            }\n            var domSelection = new NodeSelection();\n            var domNode = new DOMNode(endNode, docElement);\n            var nodeCutter = new NodeCutter();\n            var isFormatted = new IsFormatted();\n            var range = domSelection.getRange(docElement);\n            var save = domSelection.save(range, docElement);\n            var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) :\n                domSelection.getSelectionNodeCollectionBr(range);\n            var isCollapsed = false;\n            var isFormat = false;\n            var isCursor = false;\n            var preventRestore = false;\n            var isFontStyle = (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1);\n            if (range.collapsed) {\n                if (nodes.length > 0) {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n                }\n                else if (range.startContainer.nodeType === 3 && range.startContainer.parentElement.childElementCount > 0 &&\n                    range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') {\n                    isCollapsed = true;\n                    range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n                    nodes.push(range.startContainer);\n                }\n                else {\n                    var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n                    domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n                    var childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n                    if (!isNOU(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n                        domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n                        preventRestore = true;\n                    }\n                    else {\n                        domSelection.endOffset = domSelection.startOffset = 1;\n                    }\n                    if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n                        preventRestore = true;\n                    }\n                }\n            }\n            isCursor = range.collapsed;\n            var isSubSup = false;\n            for (var index = 0; index < nodes.length; index++) {\n                var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n                if (formatNode === null) {\n                    if (format === 'subscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                    else if (format === 'superscript') {\n                        formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n                        isSubSup = formatNode === null ? false : true;\n                    }\n                }\n                if (index === 0 && formatNode === null) {\n                    isFormat = true;\n                }\n                if (formatNode !== null && (!isFormat || isFontStyle)) {\n                    nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n                }\n                else {\n                    nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);\n                }\n                domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n            }\n            if (isIDevice()) {\n                setEditFrameFocus(endNode, selector);\n            }\n            if (!preventRestore) {\n                save.restore();\n            }\n            if (isSubSup) {\n                this.applyFormat(docElement, format, endNode, enterAction);\n            }\n        }\n    };\n    SelectionCommands.insertCursorNode = function (docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n        var cursorNodes = domSelection.getNodeCollection(range);\n        var domNode = new DOMNode(endNode, docElement);\n        var cursorFormat = (cursorNodes.length > 0) ?\n            (cursorNodes.length > 1 && range.startContainer === range.endContainer) ?\n                this.getCursorFormat(isFormatted, cursorNodes, format, endNode) :\n                isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n        var cursorNode = null;\n        if (cursorFormat) {\n            cursorNode = cursorNodes[0];\n            if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {\n                var isCursorEqual = false;\n                var regEx = new RegExp(String.fromCharCode(8203), 'g');\n                var emptySpaceNode = void 0;\n                if (cursorFormat.firstChild === cursorNode) {\n                    cursorNode.textContent = (cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) &&\n                        cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 :\n                        cursorFormat.childElementCount === 0) &&\n                        (cursorFormat.parentElement.textContent.length > 1 ||\n                            cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ?\n                        cursorNode.textContent : cursorNode.textContent.replace(regEx, ''));\n                    emptySpaceNode = cursorNode;\n                    isCursorEqual = true;\n                }\n                else {\n                    cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n                    emptySpaceNode = cursorFormat.firstChild;\n                }\n                var pointer = void 0;\n                if (emptySpaceNode.textContent.length === 0) {\n                    if (!isNOU(emptySpaceNode.previousSibling)) {\n                        cursorNode = emptySpaceNode.previousSibling;\n                        pointer = emptySpaceNode.textContent.length - 1;\n                        domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n                    }\n                    else if (!isNOU(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n                        var brElem = document.createElement('BR');\n                        emptySpaceNode.parentElement.appendChild(brElem);\n                        detach(emptySpaceNode);\n                        cursorNode = brElem;\n                        domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n                    }\n                }\n            }\n            if ((['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1)) {\n                if (format === 'fontcolor') {\n                    cursorFormat.style.color = value;\n                }\n                else if (format === 'fontname') {\n                    cursorFormat.style.fontFamily = value;\n                }\n                else if (format === 'fontsize') {\n                    cursorFormat.style.fontSize = value;\n                }\n                else {\n                    cursorFormat.style.backgroundColor = value;\n                }\n                cursorNode = cursorFormat;\n            }\n            else {\n                InsertMethods.unwrap(cursorFormat);\n            }\n        }\n        else {\n            if (cursorNodes.length > 1 && range.startOffset > 0 && (cursorNodes[0].firstElementChild &&\n                cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br')) {\n                cursorNodes[0].innerHTML = '';\n            }\n            if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' ||\n                cursorNodes[0].nextSibling.nodeName === 'BR')) {\n                detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n            }\n            cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n        }\n        return cursorNode;\n    };\n    SelectionCommands.getCursorFormat = function (isFormatted, cursorNodes, format, endNode) {\n        var currentNode;\n        for (var index = 0; index < cursorNodes.length; index++) {\n            currentNode = cursorNodes[index].lastElementChild ?\n                cursorNodes[index].lastElementChild : cursorNodes[index];\n        }\n        return isFormatted.getFormattedNode(currentNode, format, endNode);\n    };\n    SelectionCommands.removeFormat = function (nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n        var splitNode = null;\n        var startText = range.startContainer.nodeName === '#text' ?\n            range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) :\n            range.startContainer.textContent;\n        if (!(range.startContainer === range.endContainer && range.startOffset === 0\n            && range.endOffset === range.startContainer.length)) {\n            var nodeIndex = [];\n            var cloneNode = nodes[index];\n            do {\n                nodeIndex.push(domSelection.getIndex(cloneNode));\n                cloneNode = cloneNode.parentNode;\n            } while (cloneNode && (cloneNode !== formatNode));\n            if (nodes[index].nodeName !== 'BR') {\n                cloneNode = splitNode = (isCursor && (formatNode.textContent.length - 1) === range.startOffset) ?\n                    nodeCutter.SplitNode(range, formatNode, true)\n                    : nodeCutter.GetSpliceNode(range, formatNode);\n            }\n            if (!isCursor) {\n                while (cloneNode && cloneNode.childNodes.length > 0 && ((nodeIndex.length - 1) >= 0)\n                    && (cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1])) {\n                    cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n                    nodeIndex.pop();\n                }\n                if (nodes[index].nodeName !== 'BR') {\n                    if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n                        nodes[index] = cloneNode;\n                    }\n                    else {\n                        var divNode = document.createElement('div');\n                        divNode.innerHTML = '&#8203;';\n                        if (cloneNode.nodeType !== 3) {\n                            cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n                            nodes[index] = cloneNode.firstChild;\n                        }\n                        else {\n                            cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n                            nodes[index] = cloneNode.previousSibling;\n                            cloneNode.parentNode.removeChild(cloneNode);\n                        }\n                    }\n                }\n            }\n            else {\n                var lastNode = splitNode;\n                for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n                    lastNode = lastNode.firstChild;\n                }\n                lastNode.innerHTML = '&#8203;';\n                nodes[index] = lastNode.firstChild;\n            }\n        }\n        var fontStyle;\n        if (format === 'backgroundcolor') {\n            fontStyle = formatNode.style.fontSize;\n        }\n        var bgStyle;\n        if (format === 'fontsize') {\n            var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n            if (!isNOU(bg)) {\n                bgStyle = bg.style.backgroundColor;\n            }\n        }\n        var formatNodeStyles = formatNode.getAttribute('style');\n        var formatNodeTagName = formatNode.tagName;\n        var child = InsertMethods.unwrap(formatNode);\n        if (child[0] && !isFontStyle) {\n            var nodeTraverse = child[index] ? child[index] : child[0];\n            var textNode = nodeTraverse;\n            for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; \n            // eslint-disable-next-line\n            nodeTraverse = nodeTraverse) {\n                if (nodeTraverse.parentElement && nodeTraverse.parentElement.tagName.toLocaleLowerCase()\n                    === formatNode.tagName.toLocaleLowerCase() &&\n                    (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n                    if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase()\n                        === formatNode.tagName.toLocaleLowerCase()) {\n                        if ((range.startOffset === range.endOffset) && textNode.nodeType !== 1 &&\n                            !isNOU(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n                            range.setStart(textNode, 0);\n                            range.setEnd(textNode, textNode.textContent.length);\n                            nodeCutter.SplitNode(range, textNode.parentElement, false);\n                        }\n                    }\n                    if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n                        if (formatNode.style.textDecoration === 'underline' &&\n                            nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n                            nodeTraverse = nodeTraverse.parentElement;\n                            continue;\n                        }\n                    }\n                    InsertMethods.unwrap(nodeTraverse.parentElement);\n                    nodeTraverse = !isNOU(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode :\n                        nodeTraverse.parentElement;\n                }\n                else {\n                    nodeTraverse = nodeTraverse.parentElement;\n                }\n            }\n        }\n        if (child.length > 0 && isFontStyle) {\n            for (var num = 0; num < child.length; num++) {\n                if (child[num].nodeType !== 3 || (child[num].textContent && child[num].textContent.trim().length > 0)) {\n                    child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n                    if (child[num].textContent === startText) {\n                        if (num === 0) {\n                            range.setStartBefore(child[num]);\n                        }\n                        else if (num === child.length - 1) {\n                            range.setEndAfter(child[num]);\n                        }\n                    }\n                }\n            }\n            var currentNodeElem = nodes[index].parentElement;\n            if (!isNOU(fontStyle) && fontStyle !== '') {\n                currentNodeElem.style.fontSize = fontStyle;\n            }\n            if (!isNOU(bgStyle) && bgStyle !== '') {\n                currentNodeElem.style.backgroundColor = bgStyle;\n            }\n            if ((format === 'backgroundcolor' && !isNOU(fontStyle) && fontStyle !== '') &&\n                currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n                var curParentElem = currentNodeElem.parentElement;\n                curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n                detach(curParentElem);\n            }\n            if (format === 'fontsize' || format === 'fontcolor') {\n                var liElement = nodes[index].parentElement;\n                var parentElement = nodes[index].parentElement;\n                while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                    parentElement = parentElement.parentElement;\n                    liElement = parentElement;\n                }\n                if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                    liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                    if (format === 'fontsize') {\n                        liElement.style.fontSize = value;\n                    }\n                    else {\n                        liElement.style.color = value;\n                        liElement.style.textDecoration = 'inherit';\n                    }\n                }\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.insertFormat = function (docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {\n        if (!isCursor) {\n            if ((formatNode === null && isFormat) || isFontStyle) {\n                if (nodes[index].nodeName !== 'BR') {\n                    nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n                    nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n                }\n                if (format === 'uppercase' || format === 'lowercase') {\n                    nodes[index].textContent = (format === 'uppercase') ? nodes[index].textContent.toLocaleUpperCase()\n                        : nodes[index].textContent.toLocaleLowerCase();\n                }\n                else if (!(isFontStyle === true && value === '')) {\n                    var element = this.GetFormatNode(format, value);\n                    if (format === 'fontsize' || format === 'fontcolor') {\n                        var liElement = nodes[index].parentElement;\n                        var parentElement = nodes[index].parentElement;\n                        while (!isNOU(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                            parentElement = parentElement.parentElement;\n                            liElement = parentElement;\n                        }\n                        if (!isNOU(liElement) && liElement.tagName.toLowerCase() === 'li' &&\n                            liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                            if (format === 'fontsize') {\n                                liElement.style.fontSize = value;\n                            }\n                            else {\n                                liElement.style.color = value;\n                                liElement.style.textDecoration = 'inherit';\n                            }\n                        }\n                        nodes[index] = this.applyStyles(nodes, index, element);\n                        if (format === 'fontsize') {\n                            var bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n                            if (!isNOU(bg)) {\n                                nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor;\n                            }\n                        }\n                    }\n                    else {\n                        nodes[index] = this.applyStyles(nodes, index, element);\n                    }\n                }\n            }\n            else {\n                nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n            }\n        }\n        else {\n            if (format !== 'uppercase' && format !== 'lowercase') {\n                var element = this.getInsertNode(docElement, range, format, value);\n                nodes[index] = element.firstChild;\n                nodeCutter.position = 1;\n            }\n            else {\n                nodeCutter.position = range.startOffset;\n            }\n        }\n        return nodes[index];\n    };\n    SelectionCommands.applyStyles = function (nodes, index, element) {\n        if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n            nodes[index] = (index === (nodes.length - 1)) || nodes[index].nodeName === 'BR' ?\n                InsertMethods.Wrap(nodes[index], element)\n                : InsertMethods.WrapBefore(nodes[index], element, true);\n            nodes[index] = this.getChildNode(nodes[index], element);\n        }\n        return nodes[index];\n    };\n    SelectionCommands.getInsertNode = function (docElement, range, format, value) {\n        var element = this.GetFormatNode(format, value);\n        element.innerHTML = '&#8203;';\n        if (Browser.isIE) {\n            var frag = docElement.createDocumentFragment();\n            frag.appendChild(element);\n            range.insertNode(frag);\n        }\n        else {\n            range.insertNode(element);\n        }\n        return element;\n    };\n    SelectionCommands.getChildNode = function (node, element) {\n        if (node === undefined || node === null) {\n            element.innerHTML = '&#8203;';\n            node = element.firstChild;\n        }\n        return node;\n    };\n    SelectionCommands.applySelection = function (nodes, domSelection, nodeCutter, index, isCollapsed) {\n        if (nodes.length === 1 && !isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = 0;\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        else if (nodes.length === 1 && isCollapsed) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.endContainer = domSelection.startContainer;\n            domSelection.startOffset = nodeCutter.position;\n            domSelection.endOffset = nodeCutter.position;\n        }\n        else if (index === 0) {\n            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n            domSelection.startOffset = 0;\n        }\n        else if (index === nodes.length - 1) {\n            domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n            domSelection.endOffset = nodes[index].textContent.length;\n        }\n        return domSelection;\n    };\n    SelectionCommands.GetFormatNode = function (format, value, tagName, styles) {\n        var node;\n        switch (format) {\n            case 'bold':\n                return document.createElement('strong');\n            case 'italic':\n                return document.createElement('em');\n            case 'underline':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'underline';\n                return node;\n            case 'strikethrough':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.textDecoration = 'line-through';\n                return node;\n            case 'superscript':\n                return document.createElement('sup');\n            case 'subscript':\n                return document.createElement('sub');\n            case 'fontcolor':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.color = value;\n                node.style.textDecoration = 'inherit';\n                return node;\n            case 'fontname':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontFamily = value;\n                return node;\n            case 'fontsize':\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.fontSize = value;\n                return node;\n            default:\n                node = document.createElement('span');\n                this.updateStyles(node, tagName, styles);\n                node.style.backgroundColor = value;\n                return node;\n        }\n    };\n    SelectionCommands.updateStyles = function (ele, tag, styles) {\n        if (styles !== null && tag === 'SPAN') {\n            ele.setAttribute('style', styles);\n        }\n    };\n    SelectionCommands.enterAction = 'P';\n    return SelectionCommands;\n}());\nexport { SelectionCommands };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}