{"ast":null,"code":"import * as CONSTANT from './../base/constant';\nimport { InsertHtml } from './inserthtml';\n/**\n * Selection EXEC internal component\n *\n * @hidden\n\n */\nvar InsertHtmlExec = /** @class */function () {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - sepcifies the parent element\n   * @hidden\n    */\n  function InsertHtmlExec(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n  InsertHtmlExec.prototype.addEventListener = function () {\n    this.parent.observer.on(CONSTANT.INSERTHTML_TYPE, this.applyHtml, this);\n  };\n  InsertHtmlExec.prototype.applyHtml = function (e) {\n    InsertHtml.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, true);\n    if (e.subCommand === 'pasteCleanup') {\n      var pastedElements = this.parent.editableElement.querySelectorAll('.pasteContent_RTE');\n      var allPastedElements = [].slice.call(pastedElements);\n      var imgElements = this.parent.editableElement.querySelectorAll('.pasteContent_Img');\n      var allImgElm = [].slice.call(imgElements);\n      e.callBack({\n        requestType: e.subCommand,\n        editorMode: 'HTML',\n        elements: allPastedElements,\n        imgElem: allImgElm\n      });\n    } else {\n      if (e.callBack) {\n        e.callBack({\n          requestType: e.subCommand,\n          editorMode: 'HTML',\n          event: e.event,\n          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n        });\n      }\n    }\n  };\n  return InsertHtmlExec;\n}();\nexport { InsertHtmlExec };","map":{"version":3,"names":["CONSTANT","InsertHtml","InsertHtmlExec","parent","addEventListener","prototype","observer","on","INSERTHTML_TYPE","applyHtml","e","Insert","currentDocument","value","editableElement","subCommand","pastedElements","querySelectorAll","allPastedElements","slice","call","imgElements","allImgElm","callBack","requestType","editorMode","elements","imgElem","event","range","nodeSelection","getRange","getSelectedNodes"],"sources":["D:/USPERSO IMPLEMENTATION/Projet_DevIII/frontend/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/inserthtml-exec.js"],"sourcesContent":["import * as CONSTANT from './../base/constant';\nimport { InsertHtml } from './inserthtml';\n/**\n * Selection EXEC internal component\n *\n * @hidden\n\n */\nvar InsertHtmlExec = /** @class */ (function () {\n    /**\n     * Constructor for creating the Formats plugin\n     *\n     * @param {EditorManager} parent - sepcifies the parent element\n     * @hidden\n\n     */\n    function InsertHtmlExec(parent) {\n        this.parent = parent;\n        this.addEventListener();\n    }\n    InsertHtmlExec.prototype.addEventListener = function () {\n        this.parent.observer.on(CONSTANT.INSERTHTML_TYPE, this.applyHtml, this);\n    };\n    InsertHtmlExec.prototype.applyHtml = function (e) {\n        InsertHtml.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, true);\n        if (e.subCommand === 'pasteCleanup') {\n            var pastedElements = this.parent.editableElement.querySelectorAll('.pasteContent_RTE');\n            var allPastedElements = [].slice.call(pastedElements);\n            var imgElements = this.parent.editableElement.querySelectorAll('.pasteContent_Img');\n            var allImgElm = [].slice.call(imgElements);\n            e.callBack({\n                requestType: e.subCommand,\n                editorMode: 'HTML',\n                elements: allPastedElements,\n                imgElem: allImgElm\n            });\n        }\n        else {\n            if (e.callBack) {\n                e.callBack({\n                    requestType: e.subCommand,\n                    editorMode: 'HTML',\n                    event: e.event,\n                    range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n                    elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n                });\n            }\n        }\n    };\n    return InsertHtmlExec;\n}());\nexport { InsertHtmlExec };\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,oBAAoB;AAC9C,SAASC,UAAU,QAAQ,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG,aAAe,YAAY;EAC5C;AACJ;AACA;AACA;AACA;AACA;EAEI,SAASA,cAAcA,CAACC,MAAM,EAAE;IAC5B,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,gBAAgB,EAAE;EAC3B;EACAF,cAAc,CAACG,SAAS,CAACD,gBAAgB,GAAG,YAAY;IACpD,IAAI,CAACD,MAAM,CAACG,QAAQ,CAACC,EAAE,CAACP,QAAQ,CAACQ,eAAe,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC;EAC3E,CAAC;EACDP,cAAc,CAACG,SAAS,CAACI,SAAS,GAAG,UAAUC,CAAC,EAAE;IAC9CT,UAAU,CAACU,MAAM,CAAC,IAAI,CAACR,MAAM,CAACS,eAAe,EAAEF,CAAC,CAACG,KAAK,EAAE,IAAI,CAACV,MAAM,CAACW,eAAe,EAAE,IAAI,CAAC;IAC1F,IAAIJ,CAAC,CAACK,UAAU,KAAK,cAAc,EAAE;MACjC,IAAIC,cAAc,GAAG,IAAI,CAACb,MAAM,CAACW,eAAe,CAACG,gBAAgB,CAAC,mBAAmB,CAAC;MACtF,IAAIC,iBAAiB,GAAG,EAAE,CAACC,KAAK,CAACC,IAAI,CAACJ,cAAc,CAAC;MACrD,IAAIK,WAAW,GAAG,IAAI,CAAClB,MAAM,CAACW,eAAe,CAACG,gBAAgB,CAAC,mBAAmB,CAAC;MACnF,IAAIK,SAAS,GAAG,EAAE,CAACH,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC;MAC1CX,CAAC,CAACa,QAAQ,CAAC;QACPC,WAAW,EAAEd,CAAC,CAACK,UAAU;QACzBU,UAAU,EAAE,MAAM;QAClBC,QAAQ,EAAER,iBAAiB;QAC3BS,OAAO,EAAEL;MACb,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAIZ,CAAC,CAACa,QAAQ,EAAE;QACZb,CAAC,CAACa,QAAQ,CAAC;UACPC,WAAW,EAAEd,CAAC,CAACK,UAAU;UACzBU,UAAU,EAAE,MAAM;UAClBG,KAAK,EAAElB,CAAC,CAACkB,KAAK;UACdC,KAAK,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,aAAa,CAACC,QAAQ,CAAC,IAAI,CAAC5B,MAAM,CAACS,eAAe,CAAC;UACtEc,QAAQ,EAAE,IAAI,CAACvB,MAAM,CAAC2B,aAAa,CAACE,gBAAgB,CAAC,IAAI,CAAC7B,MAAM,CAACS,eAAe;QACpF,CAAC,CAAC;MACN;IACJ;EACJ,CAAC;EACD,OAAOV,cAAc;AACzB,CAAC,EAAG;AACJ,SAASA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}