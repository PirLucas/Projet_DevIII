{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\nimport { getPoint, withInRange, TransformToVisible } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineAreaSeries` module used to render the spline area series.\n */\nvar SplineAreaSeries = /** @class */function (_super) {\n  __extends(SplineAreaSeries, _super);\n  function SplineAreaSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render the splineArea series.\n   *\n   * @returns {void}\n   * @private\n   */\n  SplineAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var firstPoint = null;\n    var direction = '';\n    var startPoint = null;\n    var startPoint1 = null;\n    var pt2;\n    var bpt1;\n    var bpt2;\n    var controlPt1;\n    var controlPt2;\n    var realPoints = [];\n    var points = [];\n    var point;\n    var pointIndex = 0;\n    realPoints = this.filterEmptyPoints(series);\n    for (var i = 0; i < realPoints.length; i++) {\n      point = realPoints[i];\n      if (point.x === null || point.x === '') {\n        continue;\n      } else {\n        point.index = pointIndex;\n        pointIndex++;\n        points.push(point);\n      }\n    }\n    var pointsLength = points.length;\n    var previous;\n    var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n    var origin = series.chart.chartAreaType === 'PolarRadar' ? series.points[0].yValue : Math.max(series.yAxis.visibleRange.min, 0);\n    for (var i = 0; i < pointsLength; i++) {\n      point = points[i];\n      point.symbolLocations = [];\n      point.regions = [];\n      previous = this.getPreviousIndex(points, point.index - 1, series);\n      if (point.visible && withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n        if (firstPoint) {\n          controlPt1 = series.drawPoints[previous].controlPoint1;\n          controlPt2 = series.drawPoints[previous].controlPoint2;\n          pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n          bpt1 = getCoordinate(controlPt1.x, controlPt1.y, xAxis, yAxis, isInverted, series);\n          bpt2 = getCoordinate(controlPt2.x, controlPt2.y, xAxis, yAxis, isInverted, series);\n          direction = direction.concat('C ' + bpt1.x + ' ' + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n        } else {\n          // Start point for the current path\n          startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n          direction += 'M ' + startPoint.x + ' ' + startPoint.y + ' ';\n          // First Point to draw the area path\n          startPoint1 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n          direction += 'L ' + startPoint1.x + ' ' + startPoint1.y + ' ';\n        }\n        this.storePointLocation(point, series, isInverted, getCoordinate);\n        firstPoint = point;\n      } else {\n        firstPoint = null;\n        point.symbolLocations = [];\n      }\n      if ((i + 1 < pointsLength && !points[i + 1].visible || i === pointsLength - 1) && pt2 && startPoint) {\n        startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n        direction = direction.concat('L ' + startPoint.x + ' ' + startPoint.y);\n      }\n    }\n    this.appendLinePath(new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction), series, '');\n    this.renderMarker(series);\n  };\n  /**\n   * Get module name.\n   */\n  SplineAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'SplineAreaSeries';\n  };\n  /**\n   * To destroy the spline.\n   *\n   * @returns {void}\n   * @private\n   */\n  SplineAreaSeries.prototype.destroy = function () {\n    /**\n     * Destroy method calling here\n     */\n  };\n  return SplineAreaSeries;\n}(SplineBase);\nexport { SplineAreaSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","getPoint","withInRange","TransformToVisible","PathOption","SplineBase","SplineAreaSeries","_super","apply","arguments","render","series","xAxis","yAxis","isInverted","firstPoint","direction","startPoint","startPoint1","pt2","bpt1","bpt2","controlPt1","controlPt2","realPoints","points","point","pointIndex","filterEmptyPoints","i","length","x","index","push","pointsLength","previous","getCoordinate","chart","chartAreaType","origin","yValue","Math","max","visibleRange","min","symbolLocations","regions","getPreviousIndex","visible","getNextIndex","drawPoints","controlPoint1","controlPoint2","xValue","y","concat","storePointLocation","appendLinePath","element","id","interior","border","width","color","opacity","dashArray","renderMarker","getModuleName","destroy"],"sources":["D:/USPERSO IMPLEMENTATION/Projet_DevIII/frontend/node_modules/@syncfusion/ej2-charts/src/chart/series/spline-area-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\nimport { getPoint, withInRange, TransformToVisible } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineAreaSeries` module used to render the spline area series.\n */\nvar SplineAreaSeries = /** @class */ (function (_super) {\n    __extends(SplineAreaSeries, _super);\n    function SplineAreaSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render the splineArea series.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n        var firstPoint = null;\n        var direction = '';\n        var startPoint = null;\n        var startPoint1 = null;\n        var pt2;\n        var bpt1;\n        var bpt2;\n        var controlPt1;\n        var controlPt2;\n        var realPoints = [];\n        var points = [];\n        var point;\n        var pointIndex = 0;\n        realPoints = this.filterEmptyPoints(series);\n        for (var i = 0; i < realPoints.length; i++) {\n            point = realPoints[i];\n            if (point.x === null || point.x === '') {\n                continue;\n            }\n            else {\n                point.index = pointIndex;\n                pointIndex++;\n                points.push(point);\n            }\n        }\n        var pointsLength = points.length;\n        var previous;\n        var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n        var origin = series.chart.chartAreaType === 'PolarRadar' ? series.points[0].yValue :\n            Math.max(series.yAxis.visibleRange.min, 0);\n        for (var i = 0; i < pointsLength; i++) {\n            point = points[i];\n            point.symbolLocations = [];\n            point.regions = [];\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            if (point.visible &&\n                withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n                if (firstPoint) {\n                    controlPt1 = series.drawPoints[previous].controlPoint1;\n                    controlPt2 = series.drawPoints[previous].controlPoint2;\n                    pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n                    bpt1 = getCoordinate(controlPt1.x, controlPt1.y, xAxis, yAxis, isInverted, series);\n                    bpt2 = getCoordinate(controlPt2.x, controlPt2.y, xAxis, yAxis, isInverted, series);\n                    direction = direction.concat('C ' + bpt1.x + ' '\n                        + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n                }\n                else {\n                    // Start point for the current path\n                    startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n                    direction += ('M ' + startPoint.x + ' ' + startPoint.y + ' ');\n                    // First Point to draw the area path\n                    startPoint1 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n                    direction += ('L ' + startPoint1.x + ' ' + startPoint1.y + ' ');\n                }\n                this.storePointLocation(point, series, isInverted, getCoordinate);\n                firstPoint = point;\n            }\n            else {\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n            if (((i + 1 < pointsLength && !points[i + 1].visible) || i === pointsLength - 1)\n                && pt2 && startPoint) {\n                startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n                direction = direction.concat('L ' + (startPoint.x) + ' ' + (startPoint.y));\n            }\n        }\n        this.appendLinePath(new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, series.border.width, series.border.color, series.opacity, series.dashArray, direction), series, '');\n        this.renderMarker(series);\n    };\n    /**\n     * Get module name.\n     */\n    SplineAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'SplineAreaSeries';\n    };\n    /**\n     * To destroy the spline.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.destroy = function () {\n        /**\n         * Destroy method calling here\n         */\n    };\n    return SplineAreaSeries;\n}(SplineBase));\nexport { SplineAreaSeries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}