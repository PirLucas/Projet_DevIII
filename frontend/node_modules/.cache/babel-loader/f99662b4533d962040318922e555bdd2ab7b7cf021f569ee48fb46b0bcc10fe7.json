{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/**\n * Selection src file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection = /** @class */function (_super) {\n  __extends(Selection, _super);\n  /**\n   * Constructor for selection module.\n   *\n   * @private\n   */\n  function Selection(chart) {\n    var _this = _super.call(this, chart) || this;\n    _this.isdrawRect = true;\n    _this.multiDataIndexes = [];\n    _this.pathIndex = 0;\n    _this.seriesIndex = 0;\n    _this.count = -1;\n    _this.dragRectArray = [];\n    _this.filterArray = [];\n    _this.totalSelectedPoints = [];\n    _this.chart = chart;\n    _this.renderer = chart.renderer;\n    var mode = chart.selectionMode;\n    _this.isMultiDrag = chart.isMultiSelect && mode.indexOf('Drag') > -1;\n    _this.addEventListener();\n    return _this;\n  }\n  /**\n   * Binding events for selection module.\n   */\n  Selection.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed || this.chart.stockChart && this.chart.stockChart.onPanning) {\n      return;\n    }\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(cancelEvent, this.completeSelection, this);\n    this.chart.on('click', this.calculateSelectedElements, this);\n    this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n    this.chart.on(Browser.touchEndEvent, this.completeSelection, this);\n  };\n  /**\n   * Chart mouse down\n   */\n  Selection.prototype.mousedown = function (e) {\n    var chart = this.chart;\n    if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n      return;\n    }\n    if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n      this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n    }\n  };\n  /**\n   * UnBinding events for selection module.\n   */\n  Selection.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('pointerleave' || 'mouseleave', this.completeSelection);\n    this.chart.off('click', this.calculateSelectedElements);\n    this.chart.off(Browser.touchStartEvent, this.mousedown);\n    this.chart.off(Browser.touchEndEvent, this.completeSelection);\n  };\n  /**\n   * To find private variable values\n   */\n  Selection.prototype.initPrivateVariables = function (chart) {\n    this.styleId = chart.element.id + '_ej2_chart_selection';\n    this.unselected = chart.element.id + '_ej2_deselected';\n    this.closeIconId = chart.element.id + '_ej2_drag_close';\n    this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n    this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n    this.draggedRect = chart.element.id + '_ej2_drag_rect';\n    this.lassoPath = chart.element.id + '_ej2_drag_path';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n    this.isSeriesMode = chart.selectionMode === 'Series';\n  };\n  /**\n   * Method to select the point and series.\n   *\n   * @returns {void}\n   */\n  Selection.prototype.invokeSelection = function (chart) {\n    this.initPrivateVariables(chart);\n    this.series = extend({}, chart.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = chart.selectionMode;\n    if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n      this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    }\n  };\n  Selection.prototype.generateStyle = function (series) {\n    if (series) {\n      if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n        this.unselected = series.unSelectedStyle || this.unselected;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightMode !== 'None') {\n        this.unselected = series.nonHighlightStyle || this.unselected;\n      }\n      return series.selectionStyle || this.styleId + '_series_' + series.index;\n    }\n    return 'undefined';\n  };\n  /**\n   *  Method to get the selected data index\n   *\n   * @private\n   */\n  Selection.prototype.selectDataIndex = function (chart, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n    }\n  };\n  /**\n   *  Method to get the selected index element\n   *\n   * @private\n   */\n  Selection.prototype.getElementByIndex = function (chart, index, suffix, marker) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n    var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n    var series = chart.series[index.series];\n    elementId = series.type !== 'Scatter' && series.type !== 'Bubble' && marker ? elementId + '_Symbol' + suffix : elementId;\n    return [getElement(elementId), (series.type === 'RangeArea' || series.type === 'SplineRangeArea') && series.marker.visible ? getElement(elementId + '1') : null];\n  };\n  /**\n   *  Method to get the selected cluster element\n   *\n   * @private\n   */\n  Selection.prototype.getClusterElements = function (chart, index) {\n    var clusters = [];\n    var seriesStyle;\n    var selectedElements;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      if (series.visible) {\n        index = new Index(series.index, index.point);\n        if (series.isRectSeries) {\n          clusters.push(this.getElementByIndex(chart, index)[0]);\n        }\n        clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n        seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n        selectedElements = document.querySelectorAll('.' + seriesStyle);\n        this.findTrackballElements(selectedElements, seriesStyle);\n        var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n        if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== clusters[clusters.length - clusterIndex].id) {\n          this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n        }\n      }\n    }\n    return clusters;\n  };\n  /**\n   *  Method to get trackball elements\n   *\n   * @private\n   */\n  Selection.prototype.findTrackballElements = function (selectedElements, className) {\n    var trackballElements;\n    var elements;\n    for (var i = 0; i < selectedElements.length; i++) {\n      if (!isNullOrUndefined(selectedElements[i])) {\n        trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ? [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n        if (trackballElements.length > 0) {\n          elements = [];\n          for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n            if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n              elements.push(trackballElements[i_1]);\n            }\n          }\n          this.removeStyles(elements);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to get the selected element\n   *\n   * @private\n   */\n  Selection.prototype.findElements = function (chart, series, index, suffix, marker) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n    if (this.isSeriesMode) {\n      return this.getSeriesElements(series);\n    } else if (this.currentMode === 'Cluster') {\n      return this.getClusterElements(chart, index);\n    } else {\n      return this.getElementByIndex(chart, index, suffix, marker);\n    }\n  };\n  /**\n   * To find the selected element.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.isAlreadySelected = function (event) {\n    var targetElem = event.target;\n    if (event.type === 'click') {\n      this.currentMode = this.chart.selectionMode;\n      this.styleId = this.chart.element.id + '_ej2_chart_selection';\n    } else if (event.type === 'mousemove' || event.type === 'pointermove') {\n      this.currentMode = this.chart.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n    }\n    if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n      if (event.type === 'click') {\n        return false;\n      }\n    }\n    if (this.chart.highlightMode !== 'None' && this.previousSelectedEle && this.previousSelectedEle[0]) {\n      var parentNodeId = targetElem.parentNode.id;\n      var isElement = void 0;\n      if (targetElem.parentNode) {\n        isElement = parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0 ? true : false;\n      }\n      for (var i = 0; i < this.previousSelectedEle.length; i++) {\n        if (this.previousSelectedEle[i].hasAttribute('class')) {\n          if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || event.type === 'click')) {\n            this.previousSelectedEle[i].removeAttribute('class');\n            if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n              if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n                for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                  this.previousSelectedEle[i].children[j].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                }\n              } else {\n                this.previousSelectedEle[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n              }\n            }\n            this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n          } else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n            this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n          }\n        }\n      }\n    }\n    return true;\n  };\n  /**\n   * To find the selected element.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.calculateSelectedElements = function (event) {\n    if (isNullOrUndefined(event.target)) {\n      return;\n    }\n    var targetElement = event.target;\n    if (this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None' || targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n      return;\n    }\n    if (event.type === 'mousemove' || event.type === 'pointermove') {\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') && (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 || targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n        return;\n      }\n    }\n    this.isAlreadySelected(event);\n    if (targetElement.id.indexOf('_Series_') > -1) {\n      var element = void 0;\n      if (targetElement.id.indexOf('_Trackball_1') > -1) {\n        element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n        element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n      } else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n        return null;\n      }\n      this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n    }\n  };\n  /**\n   *  Method to perform the selection\n   *\n   * @private\n   */\n  Selection.prototype.performSelection = function (index, chart, element) {\n    this.isSeriesMode = this.currentMode === 'Series';\n    if (chart.series[index.series].type === 'BoxAndWhisker' && element && element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n      element = element.parentNode;\n    }\n    if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element && element.id === this.chart.element.id + '_Series_' + index.series) {\n      var className = this.generateStyle(chart.series[index.series]);\n      var selectionEle = document.querySelectorAll('.' + className);\n      this.findTrackballElements(selectionEle, className);\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n    }\n    switch (this.currentMode) {\n      case 'Series':\n        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n        this.selectionComplete(chart, index, this.currentMode);\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        break;\n      case 'Point':\n        if (!isNaN(index.point) && element) {\n          var pointElements = [];\n          pointElements.push(element);\n          if (pointElements[0] !== null && chart.series[index.series].marker.visible && (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n            if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n              pointElements.push(getElement(element.id + '_Symbol'));\n            } else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n              pointElements.push(getElement(element.id.replace('_Symbol', '')));\n            }\n          }\n          this.selection(chart, index, pointElements);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n        break;\n      case 'Cluster':\n        if (!isNaN(index.point)) {\n          this.clusterSelection(chart, index);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n        break;\n    }\n  };\n  /**\n   *  Method to get the selected data index\n   *\n   * @private\n   */\n  Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n    var points;\n    var pointIndex;\n    var seriesIndex;\n    var selectedPointValues = [];\n    var yValue;\n    var selectedPointX;\n    if (selectionMode === 'Cluster') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n            seriesIndex = series.index;\n            points = series.points;\n            if (!isNaN(pointIndex)) {\n              yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n              selectedPointX = points[pointIndex].xValue;\n              if (chart.primaryXAxis.valueType === 'Category') {\n                selectedPointX = points[pointIndex].x.toLocaleString();\n              } else if (chart.primaryXAxis.valueType === 'DateTime') {\n                selectedPointX = new Date(points[pointIndex].xValue);\n              }\n              if (series.category !== 'Indicator') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: yValue,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n              if (series.type === 'RangeArea' || series.type === 'SplineRangeArea') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: points[pointIndex].regions[0].y,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n            }\n          }\n        }\n      }\n    } else if (selectionMode === 'Series') {\n      if (chart.isMultiSelect) {\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n          seriesIndex = this.selectedDataIndexes[i].series;\n          selectedPointValues.push({\n            seriesIndex: seriesIndex\n          });\n        }\n      } else {\n        seriesIndex = this.selectedDataIndexes.length > 0 ? this.selectedDataIndexes[0].series : 0;\n        selectedPointValues.push({\n          seriesIndex: seriesIndex\n        });\n      }\n    } else if (selectionMode === 'Point') {\n      for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n        pointIndex = this.selectedDataIndexes[i].point;\n        seriesIndex = this.selectedDataIndexes[i].series;\n        var series = chart.series[seriesIndex];\n        points = series.points;\n        if (!isNaN(pointIndex)) {\n          selectedPointX = points[pointIndex].xValue;\n          yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[pointIndex].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[pointIndex].xValue);\n          }\n          selectedPointValues.push({\n            x: selectedPointX,\n            y: yValue,\n            seriesIndex: seriesIndex,\n            pointIndex: pointIndex\n          });\n        }\n      }\n    }\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false\n    };\n    chart.trigger(selectionComplete, args);\n  };\n  /**\n   *  Method to perform selection\n   *\n   * @private\n   */\n  Selection.prototype.selection = function (chart, index, selectedElements) {\n    if (!(this.currentMode === 'Lasso')) {\n      if (!chart.isMultiSelect && this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 && chart.selectionMode !== 'None') {\n        this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n      }\n    }\n    if (!isNullOrUndefined(selectedElements[0])) {\n      if (chart.series[index.series].isRectSeries) {\n        if (selectedElements[0].id) {\n          if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n            selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n          } else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n            if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n              selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n            }\n          }\n        }\n      }\n      var isAdd = void 0;\n      var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n      var pClassName = selectedElements[0].parentNode && (selectedElements[0].parentNode.getAttribute('class') || '');\n      if (className !== '' && this.currentMode !== 'Cluster') {\n        this.findTrackballElements(selectedElements, className);\n      }\n      if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles(selectedElements);\n      } else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles([selectedElements[0].parentNode]);\n      } else {\n        this.previousSelectedEle = chart.highlightMode !== 'None' ? selectedElements : [];\n        this.applyStyles(selectedElements);\n        isAdd = true;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && chart.highlightMode !== 'None') {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n      }\n    }\n  };\n  /**\n   *  Method to get the cluster selection element\n   *\n   * @private\n   */\n  Selection.prototype.clusterSelection = function (chart, index) {\n    this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n  };\n  /**\n   * Method to remove the multi selected elements\n   *\n   * @private\n   */\n  Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n    var series;\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n      if (this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode) || this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false) || !this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false)) {\n        this.removeStyles(this.findElements(chart, series, index[i], '', false));\n        if (series.marker.visible) {\n          this.removeStyles(this.findElements(chart, series, index[i], '', true));\n        }\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * Method to remove the selection\n   *\n   * @private\n   */\n  Selection.prototype.blurEffect = function (chartId, visibleSeries, legendClick) {\n    if (legendClick === void 0) {\n      legendClick = false;\n    }\n    var visibility = this.checkVisibility(this.highlightDataIndexes) || this.checkVisibility(this.selectedDataIndexes); // legend click scenario\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n      if (series.visible) {\n        this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n        if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n          this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n        }\n      }\n    }\n  };\n  /**\n   * Method to add the add/remove class to element\n   *\n   * @private\n   */\n  Selection.prototype.checkSelectionElements = function (element, className, visibility, legendClick, series) {\n    var children = this.isSeriesMode ? [element] : element.childNodes;\n    if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n      children = element.childNodes;\n    }\n    var elementClassName;\n    var parentClassName;\n    var legendShape;\n    var selectElement = element;\n    for (var i = 0; i < children.length; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      parentClassName = children[i].parentNode.getAttribute('class') || '';\n      if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n        className = parentClassName.indexOf('selection') > 0 || parentClassName.indexOf('highlight') > 0 ? parentClassName : className;\n      }\n      if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n      }\n      if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        this.addSvgClass(children[i], className);\n      }\n    }\n    if (element.id.indexOf('Symbol') > -1) {\n      if (element.querySelectorAll('.' + className)[0] && element.querySelectorAll('.' + className)[0].getAttribute('class') === className) {\n        var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n        var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n        if (seriesClassName.indexOf(this.unselected) > -1) {\n          this.removeSvgClass(symbolEle, this.unselected);\n        }\n      }\n    }\n    if (this.control.legendModule && this.control.legendSettings.visible) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n          if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '')) {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n        }\n        elementClassName = selectElement.getAttribute('class') || '';\n        parentClassName = selectElement.parentNode.getAttribute('class') || '';\n        if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.unselected);\n          this.removeSvgClass(legendShape, className);\n          if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n          if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n          if (elementClassName === '' && parentClassName === '' || elementClassName.trim() === 'EJ2-Trackball') {\n            this.removeSvgClass(legendShape, className);\n          } else {\n            this.addSvgClass(legendShape, className);\n            if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n              legendShape.setAttribute('stroke', this.chart.highlightColor);\n              if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                legendShape.setAttribute('fill', this.chart.highlightColor);\n              }\n            }\n          }\n        }\n        if (legendClick && parentClassName.indexOf(className) > -1) {\n          this.addSvgClass(legendShape, className);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to apply the styles\n   *\n   * @private\n   */\n  Selection.prototype.applyStyles = function (elements) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        this.addSvgClass(element, this.getSelectionClass(element.id));\n        if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', this.chart.highlightColor);\n            }\n          } else {\n            element.setAttribute('fill', this.chart.highlightColor);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *  Method to get the selection class\n   *\n   * @private\n   */\n  Selection.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n  };\n  /**\n   *  Method to remove styles\n   *\n   * @private\n   */\n  Selection.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n        if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n            }\n          } else {\n            element.setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *  Method to remove the selected data index\n   *\n   * @private\n   */\n  Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n    if (isAdd) {\n      indexes.push(index);\n    }\n  };\n  /**\n   *  Method to get the equal index\n   *\n   * @private\n   */\n  Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n    return (first.series === second.series || this.currentMode === 'Cluster' && !checkSeriesOnly) && (checkSeriesOnly || first.point === second.point);\n  };\n  /**\n   * To redraw the selected points.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n    this.isSeriesMode = oldMode === 'Series';\n    if (!isNullOrUndefined(oldMode)) {\n      if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n        chart.isRedrawSelection = false;\n      } else {\n        chart.isRedrawSelection = true;\n      }\n    }\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    this.selectDataIndex(chart, selectedDataIndexes);\n  };\n  /** @private */\n  Selection.prototype.legendSelection = function (chart, series, event) {\n    var targetElement = event.target;\n    if (event.type === 'mousemove') {\n      if (event.target.id.indexOf('text') > 1) {\n        targetElement = getElement(event.target.id.replace('text', 'shape'));\n      }\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      this.currentMode = this.chart.highlightMode;\n    }\n    var isPreSelected = this.isAlreadySelected(event);\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.isSeriesMode = this.currentMode === 'Series';\n      var isBlurEffectNeeded = true;\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n          var element = _a[_i];\n          if (element.index !== series && !chart.isMultiSelect) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n          }\n        }\n        var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n        for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n          var seriesElement = seriesElements_1[_b];\n          if (isNullOrUndefined(seriesElement)) {\n            return;\n          }\n          this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n        }\n        this.isSeriesMode = true;\n        this.selection(chart, new Index(series, NaN), seriesElements);\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries, true);\n      }\n    }\n  };\n  Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n      this.removeStyles(elements);\n      this.isSeriesMode = true;\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(value);\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n            var element = elements_3[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, series);\n          }\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n      if (isBlurEffectNeeded) {\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n      }\n    }\n  };\n  /** @private */\n  Selection.prototype.getSeriesElements = function (series) {\n    var seriesElements = [series.seriesElement];\n    if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    } else if (series.marker.visible && series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    }\n    return seriesElements;\n  };\n  /** @private */\n  Selection.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n    if (id.indexOf('SeriesGroup') > -1) {\n      ids = id.split('SeriesGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('SymbolGroup') > -1) {\n      ids = id.split('SymbolGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('_Point_') > -1) {\n      ids = id.split('_Series_')[1].split('_Point_');\n    } else if (id.indexOf('_Series_') > -1) {\n      ids[0] = id.split('_Series_')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = ids[1];\n    }\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\n   * Drag selection that returns the selected data.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n    this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    var isLasso = chart.selectionMode === 'Lasso';\n    var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n    this.removeOffset(rect, axisOffset);\n    var points;\n    var index;\n    var selectedPointValues = [];\n    var selectedSeriesValues = [];\n    this.isSeriesMode = false;\n    var isDragResize = chart.allowMultiSelection && (this.rectGrabbing || this.resizing);\n    this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    if (dragRect.width && dragRect.height && !isClose) {\n      var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n      this.removeOffset(rt, axisOffset);\n      this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n    }\n    var _loop_1 = function (series) {\n      if (series.visible) {\n        points = series.points;\n        selectedPointValues = [];\n        var xAxisOffset_1;\n        var yAxisOffset_1;\n        if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) && !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n          xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n          yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n        } else {\n          xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n          yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n        }\n        for (var j = 0; j < points.length; j++) {\n          var yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[j].yValue : points[j].regions[0].y;\n          var isCurrentPoint = void 0;\n          var selectedPointX = points[j].xValue;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[j].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[j].xValue);\n          }\n          if (series.type === 'BoxAndWhisker') {\n            isCurrentPoint = points[j].regions.some(function (region) {\n              return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n            });\n          } else {\n            if (chart.selectionMode === 'Lasso') {\n              isCurrentPoint = points[j].isSelect;\n            } else {\n              isCurrentPoint = chart.allowMultiSelection ? this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) : points[j].symbolLocations.some(function (location) {\n                return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n              });\n            }\n          }\n          if (isCurrentPoint && series.category !== 'Indicator') {\n            index = new Index(series.index, points[j].index);\n            this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: yValue\n            });\n          }\n          if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea')) {\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: points[j].regions[0].y\n            });\n          }\n        }\n        selectedSeriesValues.push(selectedPointValues);\n      }\n    };\n    var this_1 = this;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      _loop_1(series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    var x = isLasso ? chart.mouseDownX : dragRect.x + dragRect.width;\n    var y = isLasso ? chart.mouseDownY : dragRect.y;\n    if (!isClose) {\n      this.createCloseButton(x, y);\n    }\n    var args = {\n      name: dragComplete,\n      selectedDataValues: selectedSeriesValues,\n      cancel: false\n    };\n    chart.trigger(dragComplete, args);\n  };\n  Selection.prototype.removeOffset = function (rect, clip) {\n    rect.x -= clip.x;\n    rect.y -= clip.y;\n  };\n  Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n    var location = points.symbolLocations[0];\n    for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n      var rect = rectCollection_1[_i];\n      if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Method to draw dragging rect.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n    var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n    var border = chart.chartArea.border.width;\n    var rectFill = chart.themeStyle.selectionRectFill;\n    var rectStroke = chart.themeStyle.selectionRectStroke;\n    var isLasso = chart.selectionMode === 'Lasso';\n    if (this.isdrawRect) {\n      cartesianLayout.x = cartesianLayout.x - border / 2;\n      cartesianLayout.y = cartesianLayout.y - border / 2;\n      cartesianLayout.width = cartesianLayout.width + border;\n      cartesianLayout.height = cartesianLayout.height + border;\n      this.isdrawRect = false;\n    }\n    switch (chart.selectionMode) {\n      case 'DragX':\n        dragRect.y = cartesianLayout.y;\n        dragRect.height = cartesianLayout.height;\n        break;\n      case 'DragY':\n        dragRect.x = cartesianLayout.x;\n        dragRect.width = cartesianLayout.width;\n        break;\n    }\n    if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n      return null;\n    }\n    var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n    if (chart.allowMultiSelection && isDragMode) {\n      var element = void 0;\n      var dragGroup = void 0;\n      var multiGroup = getElement(this.multiRectGroup);\n      if (!multiGroup) {\n        multiGroup = chart.svgRenderer.createGroup({\n          id: this.multiRectGroup\n        });\n        chart.svgObject.appendChild(multiGroup);\n      }\n      if (this.rectGrabbing || this.resizing) {\n        var rectElement = void 0;\n        rectElement = getElement(this.draggedRect + this.targetIndex);\n        if (rectElement.nextSibling) {\n          remove(rectElement.nextSibling);\n        }\n        this.setAttributes(rectElement, dragRect);\n      } else if (!getElement(this.draggedRectGroup + this.count)) {\n        dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup + this.count\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n      }\n      if (!(chart.selectionMode === 'Lasso')) {\n        element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, {\n          color: rectStroke,\n          width: 1\n        }, 1, dragRect));\n        element.style.cursor = \"move\";\n      } else {\n        element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n      }\n      if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n        getElement(this.draggedRectGroup + this.count).appendChild(element);\n      } else if (!this.rectGrabbing && !this.resizing) {\n        dragGroup.appendChild(element);\n      }\n    } else {\n      var element = isLasso ? getElement(this.lassoPath) : getElement(this.draggedRect);\n      if (this.closeIcon) {\n        removeElement(this.closeIconId);\n      }\n      if (element) {\n        if (isLasso) {\n          element.setAttribute('d', this.path);\n        } else {\n          this.setAttributes(element, dragRect);\n        }\n      } else {\n        var dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n        if (!(chart.selectionMode === 'Lasso')) {\n          element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, {\n            color: rectStroke,\n            width: 1\n          }, 1, dragRect));\n        } else {\n          element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n        }\n        dragGroup.appendChild(element);\n      }\n    }\n  };\n  /**\n   * To get drag selected group element index from its id\n   *\n   * @param {string} id element id\n   */\n  Selection.prototype.getIndex = function (id) {\n    var i;\n    for (i = id.length - 1; i > 0; i--) {\n      var x = Number(id[i]);\n      if (!isNaN(x)) {\n        continue;\n      } else {\n        break;\n      }\n    }\n    var index = +id.substr(i + 1, id.length - 1);\n    return index;\n  };\n  Selection.prototype.createCloseButton = function (x, y) {\n    var isMultiDrag = this.chart.allowMultiSelection;\n    var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n    var isDrag = this.rectGrabbing || this.resizing;\n    var closeIcon = this.chart.svgRenderer.createGroup({\n      id: this.closeIconId + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      style: 'cursor:pointer; visibility: visible;'\n    });\n    closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''), '#FFFFFF', {\n      color: circleStroke,\n      width: 1\n    }, 1, x, y, 10)));\n    var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) + ' L ' + (x + 4) + ' ' + (y - 4);\n    closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n      id: this.closeIconId + '_cross' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      d: direction,\n      stroke: circleStroke,\n      'stroke-width': 2,\n      fill: circleStroke\n    }));\n    this.closeIcon = closeIcon;\n    var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''));\n    if (pathElement) {\n      pathElement.appendChild(closeIcon);\n    }\n  };\n  /**\n   * Method to remove dragged element.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.removeDraggedElements = function (chart, event) {\n    if (event.target.id.indexOf(this.closeIconId) > -1 && event.type.indexOf('move') === -1) {\n      var isSelectedvalues = true;\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(event.target.id);\n        var multiRectGroupElement = getElement(this.multiRectGroup);\n        remove(getElement(this.draggedRectGroup + index));\n        this.dragRectArray[index] = null;\n        this.filterArray[index] = null;\n        this.totalSelectedPoints[index] = null;\n        if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n          removeElement(multiRectGroupElement);\n          this.dragRectArray = [];\n          this.filterArray = [];\n          this.totalSelectedPoints = [];\n        }\n        if (this.currentMode === 'Lasso') {\n          if (this.multiDataIndexes[index] != null) {\n            for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n              this.multiDataIndexes[index][i].isSelect = false;\n            }\n          }\n          this.multiDataIndexes[index] = null;\n          for (var j = 0; j < this.multiDataIndexes.length; j++) {\n            if (this.multiDataIndexes[j] != null) {\n              isSelectedvalues = false;\n              for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                this.multiDataIndexes[j][k].isSelect = true;\n              }\n            }\n          }\n          this.calculateDragSelectedElements(chart, this.dragRect, true);\n        } else if (this.filterArray.length) {\n          for (var i = 0; i < this.filterArray.length; i++) {\n            if (this.filterArray[i]) {\n              isSelectedvalues = false;\n              this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n            }\n          }\n        } else {\n          this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n        }\n      } else {\n        remove(getElement(this.draggedRectGroup));\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n      }\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n      this.changeCursorStyle(false, chart.svgObject, 'auto');\n      if (!chart.allowMultiSelection || isSelectedvalues) {\n        this.rectPoints = null;\n      }\n    }\n  };\n  /**\n   * Method to resize the drag rect.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n    var rect;\n    if (chart.allowMultiSelection && target.id.indexOf('_ej2_drag_rect') > -1 || this.dragRectArray[this.targetIndex]) {\n      if (target.id.indexOf('_ej2_drag_rect') > -1) {\n        this.targetIndex = this.getIndex(target.id);\n      }\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    }\n    if (!chart.allowMultiSelection) {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n    if (rect) {\n      var resize = this.findResizeMode(chart.svgObject, rect, location);\n      if (this.resizing) {\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, chart.chartAxisLayoutPanel.seriesClipRect);\n        this.drawDraggingRect(chart, rect);\n        this.dragRect = rect;\n      }\n      if (tapped) {\n        this.resizing = resize;\n      }\n    } else {\n      return;\n    }\n  };\n  Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n    var cursorStyle = 'se-resize';\n    var resize = false;\n    if (!this.resizing) {\n      var resizeEdges = [new Rect(rect.x, rect.y, rect.width - 5, 5), new Rect(rect.x, rect.y, 5, rect.height), new Rect(rect.x, rect.y + rect.height - 5, rect.width - 5, 5), new Rect(rect.x + rect.width - 5, rect.y + 5, 5, rect.height - 15), new Rect(rect.x + rect.width - 10, rect.y + rect.height - 10, 10, 10)]; //corner\n      for (var i = 0; i < resizeEdges.length; i++) {\n        if (withInBounds(location.x, location.y, resizeEdges[i])) {\n          cursorStyle = i === 4 ? cursorStyle : i % 2 === 0 ? 'ns-resize' : 'ew-resize';\n          resize = true;\n          this.resizeMode = i;\n          break;\n        }\n      }\n    } else {\n      var x = rect.x;\n      var y = rect.y;\n      var width = location.x - x;\n      var height = location.y - y;\n      switch (this.resizeMode) {\n        case 0:\n          height = Math.abs(rect.height + rect.y - location.y);\n          rect.y = Math.min(rect.height + rect.y, location.y);\n          rect.height = height;\n          break;\n        case 1:\n          width = Math.abs(rect.width + rect.x - location.x);\n          rect.x = Math.min(rect.width + rect.x, location.x);\n          rect.width = width;\n          break;\n        case 2:\n          rect.height = Math.abs(height);\n          rect.y = Math.min(location.y, y);\n          break;\n        case 3:\n          rect.width = Math.abs(width);\n          rect.x = Math.min(location.x, x);\n          break;\n        case 4:\n          rect.width = Math.abs(width);\n          rect.height = Math.abs(height);\n          rect.x = Math.min(location.x, x);\n          rect.y = Math.min(location.y, y);\n          break;\n      }\n    }\n    if (this.currentMode !== 'Lasso') {\n      this.changeCursorStyle(resize, getElement(this.chart.allowMultiSelection ? this.draggedRect + this.targetIndex : this.draggedRect), cursorStyle);\n    }\n    this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n    return resize;\n  };\n  Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n    cursorStyle = isResize ? cursorStyle : this.control.svgObject === rectelement ? 'auto' : 'move';\n    if (rectelement) {\n      rectelement.style.cursor = cursorStyle;\n    }\n  };\n  Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n    index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n    var seriesElements;\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      seriesElements = this.getSeriesElements(series);\n      this.removeStyles(seriesElements);\n      for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {\n        var seriesElement = seriesElements_2[_a];\n        this.removeStyles(this.getChildren(seriesElement));\n      }\n    }\n  };\n  Selection.prototype.setAttributes = function (ele, object) {\n    var keys = Object.keys(object);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      ele.setAttribute(key, object[key]);\n    }\n  };\n  /**\n   * Method to move the dragged rect.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n    var rect;\n    if ((this.resizing || this.rectGrabbing) && chart.allowMultiSelection) {\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    } else {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n    rect.x -= grabbedPoint.x - chart.mouseX;\n    rect.y -= grabbedPoint.y - chart.mouseY;\n    rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n    if (doDrawing) {\n      this.drawDraggingRect(chart, rect, target);\n    } else {\n      this.calculateDragSelectedElements(chart, rect);\n    }\n  };\n  /**\n   * To complete the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.completeSelection = function (e) {\n    var chart = this.chart;\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    this.currentMode = chart.selectionMode;\n    if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n      this.calculateDragSelectedElements(chart, this.dragRect);\n    } else if (!chart.allowMultiSelection && this.rectGrabbing && this.rectPoints.width && this.rectPoints.height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    } else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    }\n    if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n      if (this.path.indexOf('L') !== -1) {\n        if (!chart.allowMultiSelection) {\n          getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath));\n        } else if (getElement(this.lassoPath + this.count)) {\n          getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath + this.count));\n        }\n        if (this.dragging || this.resizing) {\n          this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n      }\n    }\n    this.dragging = false;\n    this.rectGrabbing = false;\n    this.resizing = false;\n    this.removeDraggedElements(chart, e);\n  };\n  Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n    return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n  };\n  /** @private */\n  Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n    var mode = chart.selectionMode;\n    this.currentMode = chart.selectionMode;\n    this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) && chart.chartAreaType !== 'PolarRadar';\n    var target = event.target;\n    this.path = undefined;\n    if (this.dragging) {\n      this.count = getElement(this.multiRectGroup) ? this.count + 1 : 0;\n      this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n      if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > seriesClipRect.x + seriesClipRect.width || chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > seriesClipRect.y + seriesClipRect.height) {\n        this.dragging = false;\n      }\n    }\n    if (mode === 'Lasso') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n            var point = _c[_b];\n            if (!chart.allowMultiSelection) {\n              point.isSelect = false;\n            }\n          }\n        }\n      }\n    }\n    if (!(mode === 'Lasso')) {\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n        this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n        this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n      }\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(target.id);\n        this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n        if (this.dragRectArray.length && this.isDragRect(target.id)) {\n          this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n          this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n        }\n      }\n    }\n  };\n  Selection.prototype.isDragRect = function (id) {\n    return id.indexOf('_ej2_drag_rect') > -1;\n  };\n  /** @private */\n  Selection.prototype.mouseMove = function (event) {\n    var chart = this.chart;\n    var target = event.target;\n    if (chart.highlightMode !== 'None') {\n      if (!isNullOrUndefined(target)) {\n        if (event.target.id.indexOf('text') > 1) {\n          target = getElement(event.target.id.replace('text', 'shape'));\n        }\n        if (target.hasAttribute('class') && (target.getAttribute('class').indexOf('highlight') > -1 || target.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n        this.calculateSelectedElements(event);\n        return;\n      }\n    }\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    if (event.type === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n      event.preventDefault();\n    }\n    var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n    if (insideMoving) {\n      if (this.rectGrabbing && !this.resizing) {\n        this.draggedRectMoved(chart, this.dragRect, true, target);\n      } else if (this.dragging && !this.resizing) {\n        if (chart.selectionMode === 'Lasso') {\n          this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        } else {\n          this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        }\n      }\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      } else if (chart.allowMultiSelection && !this.dragging || this.resizing) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      }\n    } else {\n      this.completeSelection(event);\n    }\n  };\n  Selection.prototype.getPath = function (startX, startY, endX, endY) {\n    if (this.dragging) {\n      if (this.path) {\n        this.path = this.path + ' L' + endX + ' ' + endY;\n      } else {\n        this.path = 'M ' + startX + ' ' + startY;\n      }\n    }\n  };\n  Selection.prototype.pointChecking = function (path) {\n    var _this = this;\n    var chart = this.chart;\n    var element;\n    var svgRect = getElement(chart.svgId).getBoundingClientRect();\n    var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n    var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n    this.multiDataIndexes[this.count] = [];\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      series.points.filter(function (point) {\n        // To check whether the point have symbol location value or not.\n        if (point.symbolLocations && point.symbolLocations.length) {\n          element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n        }\n        if (element === path) {\n          point.isSelect = true;\n          if (_this.chart.allowMultiSelection && _this.currentMode === 'Lasso') {\n            _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n            _this.seriesIndex++;\n          }\n        } else if (!chart.allowMultiSelection) {\n          point.isSelect = false;\n        }\n      });\n    }\n    this.seriesIndex = 0;\n  };\n  /**\n   * Get module name.\n   *\n   * @private\n   */\n  Selection.prototype.getModuleName = function () {\n    return 'Selection';\n  };\n  /**\n   * To destroy the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.destroy = function () {\n    this.removeEventListener();\n    // Destroy method performed here\n  };\n\n  return Selection;\n}(BaseSelection);\nexport { Selection };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","remove","extend","isNullOrUndefined","ChartLocation","RectOption","CircleOption","withInBounds","getDraggedRectLocation","removeElement","getElement","Rect","PathOption","Index","dragComplete","selectionComplete","BaseSelection","Selection","_super","chart","_this","call","isdrawRect","multiDataIndexes","pathIndex","seriesIndex","count","dragRectArray","filterArray","totalSelectedPoints","renderer","mode","selectionMode","isMultiDrag","isMultiSelect","indexOf","addEventListener","isDestroyed","stockChart","onPanning","cancelEvent","isPointer","on","touchMoveEvent","mouseMove","completeSelection","calculateSelectedElements","touchStartEvent","mousedown","touchEndEvent","e","isPointMouseDown","isChartDrag","isDoubleTap","isTouch","rectPoints","dragStart","chartAxisLayoutPanel","seriesClipRect","mouseDownX","mouseDownY","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","closeIconId","draggedRectGroup","multiRectGroup","draggedRect","lassoPath","selectedDataIndexes","isSeriesMode","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectDataIndex","concatIndexes","generateStyle","unSelectedStyle","highlightMode","nonHighlightStyle","selectionStyle","index","indexes","_i","indexes_1","length","performSelection","getElementByIndex","suffix","marker","elementId","point","type","visible","getClusterElements","clusters","seriesStyle","selectedElements","_a","isRectSeries","push","document","querySelectorAll","findTrackballElements","clusterIndex","removeSelection","className","trackballElements","elements","i","parentNode","slice","i_1","removeStyles","findElements","getSeriesElements","isAlreadySelected","event","targetElem","target","highlightDataIndexes","previousSelectedEle","parentNodeId","isElement","hasAttribute","getAttribute","removeAttribute","highlightColor","highlightPattern","j","children","setAttribute","control","indexFinder","interior","addOrRemoveIndex","targetElement","split","selectionEle","blurEffect","selection","isNaN","pointElements","replace","clusterSelection","points","pointIndex","selectedPointValues","yValue","selectedPointX","regions","y","xValue","primaryXAxis","valueType","x","toLocaleString","Date","category","args","name","selectedDataValues","cancel","trigger","removeMultiSelectElements","getElementById","isAdd","pClassName","getSelectionClass","applyStyles","currentIndex","seriesCollection","toEquals","splice","chartId","legendClick","visibility","checkVisibility","visibleSeries_1","checkSelectionElements","childNodes","elementClassName","parentClassName","legendShape","selectElement","addSvgClass","removeSvgClass","classList","symbolEle","seriesClassName","legendModule","legendSettings","trim","elements_1","elements_2","first","second","checkSeriesOnly","redrawSelection","oldMode","chartRedraw","isRedrawSelection","removeSelectedElements","legendSelection","isPreSelected","isBlurEffectNeeded","seriesElements","_b","seriesElements_1","seriesElement","NaN","value","elements_3","symbolElement","ids","parseInt","calculateDragSelectedElements","dragRect","isClose","isLasso","rect","width","height","axisOffset","removeOffset","selectedSeriesValues","isDragResize","allowMultiSelection","rectGrabbing","resizing","targetIndex","rt","_loop_1","xAxisOffset_1","yAxisOffset_1","isTransposed","xAxis","yAxis","isCurrentPoint","some","region","isSelect","this_1","isPointSelect","symbolLocations","location","createCloseButton","clip","xAxisOffset","yAxisOffset","rectCollection","rectCollection_1","drawDraggingRect","cartesianLayout","border","chartArea","rectFill","themeStyle","selectionRectFill","rectStroke","selectionRectStroke","isDragMode","dragGroup","multiGroup","svgRenderer","createGroup","svgObject","appendChild","rectElement","nextSibling","setAttributes","svgElement","enableCanvas","drawRectangle","color","style","cursor","drawPath","path","closeIcon","getIndex","Number","substr","circleStroke","selectionCircleStroke","isDrag","drawCircle","direction","stroke","fill","pathElement","removeDraggedElements","isSelectedvalues","multiRectGroupElement","childElementCount","k","changeCursorStyle","resizingSelectionRect","tapped","r","resize","findResizeMode","chartSvgObject","cursorStyle","resizeEdges","resizeMode","Math","abs","min","isResize","rectelement","seriesCollection_1","seriesElements_2","getChildren","ele","object","keys","keys_1","key","draggedRectMoved","grabbedPoint","doDrawing","mouseX","mouseY","dragging","pointChecking","getDragRect","chartAreaType","undefined","_c","isDragRect","isIos","isIos7","preventDefault","insideMoving","getPath","startX","startY","endX","endY","svgRect","svgId","getBoundingClientRect","offsetX","max","left","offsetY","top","filter","elementFromPoint","getModuleName","destroy"],"sources":["D:/USPERSO IMPLEMENTATION/Projet_DevIII/frontend/node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/**\n * Selection src file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection = /** @class */ (function (_super) {\n    __extends(Selection, _super);\n    /**\n     * Constructor for selection module.\n     *\n     * @private\n     */\n    function Selection(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.isdrawRect = true;\n        _this.multiDataIndexes = [];\n        _this.pathIndex = 0;\n        _this.seriesIndex = 0;\n        _this.count = -1;\n        _this.dragRectArray = [];\n        _this.filterArray = [];\n        _this.totalSelectedPoints = [];\n        _this.chart = chart;\n        _this.renderer = chart.renderer;\n        var mode = chart.selectionMode;\n        _this.isMultiDrag = chart.isMultiSelect && (mode.indexOf('Drag') > -1);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     */\n    Selection.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed || (this.chart.stockChart && this.chart.stockChart.onPanning)) {\n            return;\n        }\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(cancelEvent, this.completeSelection, this);\n        this.chart.on('click', this.calculateSelectedElements, this);\n        this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n        this.chart.on(Browser.touchEndEvent, this.completeSelection, this);\n    };\n    /**\n     * Chart mouse down\n     */\n    Selection.prototype.mousedown = function (e) {\n        var chart = this.chart;\n        if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n            return;\n        }\n        if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n            this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n        }\n    };\n    /**\n     * UnBinding events for selection module.\n     */\n    Selection.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('pointerleave' || 'mouseleave', this.completeSelection);\n        this.chart.off('click', this.calculateSelectedElements);\n        this.chart.off(Browser.touchStartEvent, this.mousedown);\n        this.chart.off(Browser.touchEndEvent, this.completeSelection);\n    };\n    /**\n     * To find private variable values\n     */\n    Selection.prototype.initPrivateVariables = function (chart) {\n        this.styleId = chart.element.id + '_ej2_chart_selection';\n        this.unselected = chart.element.id + '_ej2_deselected';\n        this.closeIconId = chart.element.id + '_ej2_drag_close';\n        this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n        this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n        this.draggedRect = chart.element.id + '_ej2_drag_rect';\n        this.lassoPath = chart.element.id + '_ej2_drag_path';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n        this.isSeriesMode = chart.selectionMode === 'Series';\n    };\n    /**\n     * Method to select the point and series.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.invokeSelection = function (chart) {\n        this.initPrivateVariables(chart);\n        this.series = extend({}, chart.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = chart.selectionMode;\n        if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n            this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n        }\n    };\n    Selection.prototype.generateStyle = function (series) {\n        if (series) {\n            if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n                this.unselected = series.unSelectedStyle || this.unselected;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightMode !== 'None') {\n                this.unselected = series.nonHighlightStyle || this.unselected;\n            }\n            return (series.selectionStyle || this.styleId + '_series_' + series.index);\n        }\n        return 'undefined';\n    };\n    /**\n     *  Method to get the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.selectDataIndex = function (chart, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n        }\n    };\n    /**\n     *  Method to get the selected index element\n     *\n     * @private\n     */\n    Selection.prototype.getElementByIndex = function (chart, index, suffix, marker) {\n        if (suffix === void 0) { suffix = ''; }\n        var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n        var series = chart.series[index.series];\n        elementId = (series.type !== 'Scatter' && series.type !== 'Bubble' && marker) ? (elementId + '_Symbol' + suffix) : elementId;\n        return [getElement(elementId), ((series.type === 'RangeArea' || series.type === 'SplineRangeArea') && series.marker.visible) ?\n                getElement(elementId + '1') : null];\n    };\n    /**\n     *  Method to get the selected cluster element\n     *\n     * @private\n     */\n    Selection.prototype.getClusterElements = function (chart, index) {\n        var clusters = [];\n        var seriesStyle;\n        var selectedElements;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                index = new Index(series.index, index.point);\n                if (series.isRectSeries) {\n                    clusters.push(this.getElementByIndex(chart, index)[0]);\n                }\n                clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n                seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n                selectedElements = document.querySelectorAll('.' + seriesStyle);\n                this.findTrackballElements(selectedElements, seriesStyle);\n                var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n                if (!chart.isMultiSelect && selectedElements.length > 0 &&\n                    selectedElements[0].id !== clusters[clusters.length - clusterIndex].id) {\n                    this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n                }\n            }\n        }\n        return clusters;\n    };\n    /**\n     *  Method to get trackball elements\n     *\n     * @private\n     */\n    Selection.prototype.findTrackballElements = function (selectedElements, className) {\n        var trackballElements;\n        var elements;\n        for (var i = 0; i < selectedElements.length; i++) {\n            if (!isNullOrUndefined(selectedElements[i])) {\n                trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ?\n                    [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n                if (trackballElements.length > 0) {\n                    elements = [];\n                    for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n                        if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n                            elements.push(trackballElements[i_1]);\n                        }\n                    }\n                    this.removeStyles(elements);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to get the selected element\n     *\n     * @private\n     */\n    Selection.prototype.findElements = function (chart, series, index, suffix, marker) {\n        if (suffix === void 0) { suffix = ''; }\n        if (this.isSeriesMode) {\n            return this.getSeriesElements(series);\n        }\n        else if (this.currentMode === 'Cluster') {\n            return this.getClusterElements(chart, index);\n        }\n        else {\n            return this.getElementByIndex(chart, index, suffix, marker);\n        }\n    };\n    /**\n     * To find the selected element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.isAlreadySelected = function (event) {\n        var targetElem = event.target;\n        if (event.type === 'click') {\n            this.currentMode = this.chart.selectionMode;\n            this.styleId = this.chart.element.id + '_ej2_chart_selection';\n        }\n        else if (event.type === 'mousemove' || event.type === 'pointermove') {\n            this.currentMode = this.chart.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n        }\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n            if (event.type === 'click') {\n                return false;\n            }\n        }\n        if ((this.chart.highlightMode !== 'None' && this.previousSelectedEle && this.previousSelectedEle[0])) {\n            var parentNodeId = targetElem.parentNode.id;\n            var isElement = void 0;\n            if (targetElem.parentNode) {\n                isElement = (parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\n            }\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\n                if (this.previousSelectedEle[i].hasAttribute('class')) {\n                    if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || event.type === 'click')) {\n                        this.previousSelectedEle[i].removeAttribute('class');\n                        if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                            if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n                                for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                                    this.previousSelectedEle[i].children[j].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                                }\n                            }\n                            else {\n                                this.previousSelectedEle[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                            }\n                        }\n                        this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n                    }\n                    else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * To find the selected element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.calculateSelectedElements = function (event) {\n        if (isNullOrUndefined(event.target)) {\n            return;\n        }\n        var targetElement = event.target;\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\n            targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n            return;\n        }\n        if (event.type === 'mousemove' || event.type === 'pointermove') {\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') &&\n                (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\n                    targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n                return;\n            }\n        }\n        this.isAlreadySelected(event);\n        if (targetElement.id.indexOf('_Series_') > -1) {\n            var element = void 0;\n            if (targetElement.id.indexOf('_Trackball_1') > -1) {\n                element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n                element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n            }\n            else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n                return null;\n            }\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n        }\n    };\n    /**\n     *  Method to perform the selection\n     *\n     * @private\n     */\n    Selection.prototype.performSelection = function (index, chart, element) {\n        this.isSeriesMode = this.currentMode === 'Series';\n        if (chart.series[index.series].type === 'BoxAndWhisker' && element &&\n            element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n            element = element.parentNode;\n        }\n        if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element &&\n            (element.id === this.chart.element.id + '_Series_' + index.series)) {\n            var className = this.generateStyle(chart.series[index.series]);\n            var selectionEle = document.querySelectorAll('.' + className);\n            this.findTrackballElements(selectionEle, className);\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n        switch (this.currentMode) {\n            case 'Series':\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                this.selectionComplete(chart, index, this.currentMode);\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n                break;\n            case 'Point':\n                if (!isNaN(index.point) && element) {\n                    var pointElements = [];\n                    pointElements.push(element);\n                    if (pointElements[0] !== null && chart.series[index.series].marker.visible &&\n                        (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n                        if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n                            pointElements.push(getElement(element.id + '_Symbol'));\n                        }\n                        else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n                            pointElements.push(getElement(element.id.replace('_Symbol', '')));\n                        }\n                    }\n                    this.selection(chart, index, pointElements);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n            case 'Cluster':\n                if (!isNaN(index.point)) {\n                    this.clusterSelection(chart, index);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n        }\n    };\n    /**\n     *  Method to get the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n        var points;\n        var pointIndex;\n        var seriesIndex;\n        var selectedPointValues = [];\n        var yValue;\n        var selectedPointX;\n        if (selectionMode === 'Cluster') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n                        seriesIndex = series.index;\n                        points = series.points;\n                        if (!isNaN(pointIndex)) {\n                            yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[pointIndex].yValue :\n                                points[pointIndex].regions[0].y;\n                            selectedPointX = points[pointIndex].xValue;\n                            if (chart.primaryXAxis.valueType === 'Category') {\n                                selectedPointX = points[pointIndex].x.toLocaleString();\n                            }\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\n                                selectedPointX = new Date(points[pointIndex].xValue);\n                            }\n                            if (series.category !== 'Indicator') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                                    pointIndex: pointIndex\n                                });\n                            }\n                            if (series.type === 'RangeArea' || series.type === 'SplineRangeArea') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: points[pointIndex].regions[0].y,\n                                    seriesIndex: seriesIndex, pointIndex: pointIndex\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectionMode === 'Series') {\n            if (chart.isMultiSelect) {\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                    seriesIndex = this.selectedDataIndexes[i].series;\n                    selectedPointValues.push({\n                        seriesIndex: seriesIndex\n                    });\n                }\n            }\n            else {\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series : 0;\n                selectedPointValues.push({\n                    seriesIndex: seriesIndex\n                });\n            }\n        }\n        else if (selectionMode === 'Point') {\n            for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                pointIndex = this.selectedDataIndexes[i].point;\n                seriesIndex = this.selectedDataIndexes[i].series;\n                var series = chart.series[seriesIndex];\n                points = series.points;\n                if (!isNaN(pointIndex)) {\n                    selectedPointX = points[pointIndex].xValue;\n                    yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[pointIndex].yValue :\n                        points[pointIndex].regions[0].y;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[pointIndex].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[pointIndex].xValue);\n                    }\n                    selectedPointValues.push({\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                        pointIndex: pointIndex\n                    });\n                }\n            }\n        }\n        var args = {\n            name: selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        chart.trigger(selectionComplete, args);\n    };\n    /**\n     *  Method to perform selection\n     *\n     * @private\n     */\n    Selection.prototype.selection = function (chart, index, selectedElements) {\n        if (!(this.currentMode === 'Lasso')) {\n            if (!chart.isMultiSelect && (this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 &&\n                chart.selectionMode !== 'None')) {\n                this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n            }\n        }\n        if (!isNullOrUndefined(selectedElements[0])) {\n            if (chart.series[index.series].isRectSeries) {\n                if (selectedElements[0].id) {\n                    if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n                        selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n                    }\n                    else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n                        if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n                            selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n                        }\n                    }\n                }\n            }\n            var isAdd = void 0;\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n            var pClassName = selectedElements[0].parentNode &&\n                (selectedElements[0].parentNode.getAttribute('class') || '');\n            if (className !== '' && this.currentMode !== 'Cluster') {\n                this.findTrackballElements(selectedElements, className);\n            }\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles(selectedElements);\n            }\n            else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles([selectedElements[0].parentNode]);\n            }\n            else {\n                this.previousSelectedEle = chart.highlightMode !== 'None' ? selectedElements : [];\n                this.applyStyles(selectedElements);\n                isAdd = true;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && chart.highlightMode !== 'None') {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n            }\n        }\n    };\n    /**\n     *  Method to get the cluster selection element\n     *\n     * @private\n     */\n    Selection.prototype.clusterSelection = function (chart, index) {\n        this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n    };\n    /**\n     * Method to remove the multi selected elements\n     *\n     * @private\n     */\n    Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false))) {\n                this.removeStyles(this.findElements(chart, series, index[i], '', false));\n                if (series.marker.visible) {\n                    this.removeStyles(this.findElements(chart, series, index[i], '', true));\n                }\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Method to remove the selection\n     *\n     * @private\n     */\n    Selection.prototype.blurEffect = function (chartId, visibleSeries, legendClick) {\n        if (legendClick === void 0) { legendClick = false; }\n        var visibility = (this.checkVisibility(this.highlightDataIndexes) ||\n            this.checkVisibility(this.selectedDataIndexes)); // legend click scenario\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (series.visible) {\n                this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n                if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n                    this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n                }\n            }\n        }\n    };\n    /**\n     * Method to add the add/remove class to element\n     *\n     * @private\n     */\n    Selection.prototype.checkSelectionElements = function (element, className, visibility, legendClick, series) {\n        var children = (this.isSeriesMode ? [element] : element.childNodes);\n        if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n            children = element.childNodes;\n        }\n        var elementClassName;\n        var parentClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\n            if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n                className = (parentClassName.indexOf('selection') > 0 ||\n                    parentClassName.indexOf('highlight') > 0) ? parentClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 &&\n                parentClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n            if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n                this.addSvgClass(children[i], className);\n            }\n        }\n        if (element.id.indexOf('Symbol') > -1) {\n            if ((element.querySelectorAll('.' + className)[0]) && element.querySelectorAll('.' + className)[0].getAttribute('class')\n                === className) {\n                var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n                var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n                if (seriesClassName.indexOf(this.unselected) > -1) {\n                    this.removeSvgClass(symbolEle, this.unselected);\n                }\n            }\n        }\n        if (this.control.legendModule && this.control.legendSettings.visible) {\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                    if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '')) {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                }\n                elementClassName = selectElement.getAttribute('class') || '';\n                parentClassName = selectElement.parentNode.getAttribute('class') || '';\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, this.unselected);\n                    this.removeSvgClass(legendShape, className);\n                    if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                    if ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                        if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                            legendShape.setAttribute('stroke', this.chart.highlightColor);\n                            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                                legendShape.setAttribute('fill', this.chart.highlightColor);\n                            }\n                        }\n                    }\n                }\n                if (legendClick && parentClassName.indexOf(className) > -1) {\n                    this.addSvgClass(legendShape, className);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to apply the styles\n     *\n     * @private\n     */\n    Selection.prototype.applyStyles = function (elements) {\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                this.addSvgClass(element, this.getSelectionClass(element.id));\n                if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                    if (element.id.indexOf('Group') > 0) {\n                        for (var i = 0; i < element.children.length; i++) {\n                            element.children[i].setAttribute('fill', this.chart.highlightColor);\n                        }\n                    }\n                    else {\n                        element.setAttribute('fill', this.chart.highlightColor);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *  Method to get the selection class\n     *\n     * @private\n     */\n    Selection.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n    };\n    /**\n     *  Method to remove styles\n     *\n     * @private\n     */\n    Selection.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n                if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                    if (element.id.indexOf('Group') > 0) {\n                        for (var i = 0; i < element.children.length; i++) {\n                            element.children[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n                        }\n                    }\n                    else {\n                        element.setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *  Method to remove the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (isAdd) {\n            indexes.push(index);\n        }\n    };\n    /**\n     *  Method to get the equal index\n     *\n     * @private\n     */\n    Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\n            && (checkSeriesOnly || (first.point === second.point)));\n    };\n    /**\n     * To redraw the selected points.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n        this.isSeriesMode = oldMode === 'Series';\n        if (!isNullOrUndefined(oldMode)) {\n            if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n                chart.isRedrawSelection = false;\n            }\n            else {\n                chart.isRedrawSelection = true;\n            }\n        }\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        this.selectDataIndex(chart, selectedDataIndexes);\n    };\n    /** @private */\n    Selection.prototype.legendSelection = function (chart, series, event) {\n        var targetElement = event.target;\n        if (event.type === 'mousemove') {\n            if (event.target.id.indexOf('text') > 1) {\n                targetElement = getElement(event.target.id.replace('text', 'shape'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.chart.highlightMode;\n        }\n        var isPreSelected = this.isAlreadySelected(event);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            this.isSeriesMode = this.currentMode === 'Series';\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== series && !chart.isMultiSelect) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n                    }\n                }\n                var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n                for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n                    var seriesElement = seriesElements_1[_b];\n                    if (isNullOrUndefined(seriesElement)) {\n                        return;\n                    }\n                    this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n                }\n                this.isSeriesMode = true;\n                this.selection(chart, new Index(series, NaN), seriesElements);\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries, true);\n            }\n        }\n    };\n    Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.isSeriesMode = true;\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(value);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n                        var element = elements_3[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, true, series);\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /** @private */\n    Selection.prototype.getSeriesElements = function (series) {\n        var seriesElements = [series.seriesElement];\n        if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        else if (series.marker.visible && series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        return seriesElements;\n    };\n    /** @private */\n    Selection.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('SeriesGroup') > -1) {\n            ids = id.split('SeriesGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('SymbolGroup') > -1) {\n            ids = id.split('SymbolGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('_Point_') > -1) {\n            ids = id.split('_Series_')[1].split('_Point_');\n        }\n        else if (id.indexOf('_Series_') > -1) {\n            ids[0] = id.split('_Series_')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = ids[1];\n        }\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Drag selection that returns the selected data.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        var isLasso = chart.selectionMode === 'Lasso';\n        var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n        this.removeOffset(rect, axisOffset);\n        var points;\n        var index;\n        var selectedPointValues = [];\n        var selectedSeriesValues = [];\n        this.isSeriesMode = false;\n        var isDragResize = (chart.allowMultiSelection) && (this.rectGrabbing || this.resizing);\n        this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] =\n            new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        if (dragRect.width && dragRect.height && !isClose) {\n            var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n            this.removeOffset(rt, axisOffset);\n            this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n        }\n        var _loop_1 = function (series) {\n            if (series.visible) {\n                points = series.points;\n                selectedPointValues = [];\n                var xAxisOffset_1;\n                var yAxisOffset_1;\n                if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) &&\n                    !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n                    xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n                    yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n                }\n                else {\n                    xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n                    yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n                }\n                for (var j = 0; j < points.length; j++) {\n                    var yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[j].yValue :\n                        points[j].regions[0].y;\n                    var isCurrentPoint = void 0;\n                    var selectedPointX = points[j].xValue;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[j].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[j].xValue);\n                    }\n                    if (series.type === 'BoxAndWhisker') {\n                        isCurrentPoint = points[j].regions.some(function (region) {\n                            return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n                        });\n                    }\n                    else {\n                        if (chart.selectionMode === 'Lasso') {\n                            isCurrentPoint = points[j].isSelect;\n                        }\n                        else {\n                            isCurrentPoint = (chart.allowMultiSelection) ?\n                                this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) :\n                                points[j].symbolLocations.some(function (location) {\n                                    return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n                                });\n                        }\n                    }\n                    if (isCurrentPoint && series.category !== 'Indicator') {\n                        index = new Index(series.index, points[j].index);\n                        this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n                        selectedPointValues.push({ x: selectedPointX, y: yValue });\n                    }\n                    if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea')) {\n                        selectedPointValues.push({ x: selectedPointX, y: points[j].regions[0].y });\n                    }\n                }\n                selectedSeriesValues.push(selectedPointValues);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            _loop_1(series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        var x = isLasso ? chart.mouseDownX : (dragRect.x + dragRect.width);\n        var y = isLasso ? chart.mouseDownY : dragRect.y;\n        if (!isClose) {\n            this.createCloseButton(x, y);\n        }\n        var args = {\n            name: dragComplete,\n            selectedDataValues: selectedSeriesValues,\n            cancel: false\n        };\n        chart.trigger(dragComplete, args);\n    };\n    Selection.prototype.removeOffset = function (rect, clip) {\n        rect.x -= clip.x;\n        rect.y -= clip.y;\n    };\n    Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n        var location = points.symbolLocations[0];\n        for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n            var rect = rectCollection_1[_i];\n            if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Method to draw dragging rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n        var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n        var border = chart.chartArea.border.width;\n        var rectFill = chart.themeStyle.selectionRectFill;\n        var rectStroke = chart.themeStyle.selectionRectStroke;\n        var isLasso = chart.selectionMode === 'Lasso';\n        if (this.isdrawRect) {\n            cartesianLayout.x = cartesianLayout.x - border / 2;\n            cartesianLayout.y = cartesianLayout.y - border / 2;\n            cartesianLayout.width = cartesianLayout.width + border;\n            cartesianLayout.height = cartesianLayout.height + border;\n            this.isdrawRect = false;\n        }\n        switch (chart.selectionMode) {\n            case 'DragX':\n                dragRect.y = cartesianLayout.y;\n                dragRect.height = cartesianLayout.height;\n                break;\n            case 'DragY':\n                dragRect.x = cartesianLayout.x;\n                dragRect.width = cartesianLayout.width;\n                break;\n        }\n        if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n            return null;\n        }\n        var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n        if ((chart.allowMultiSelection) && isDragMode) {\n            var element = void 0;\n            var dragGroup = void 0;\n            var multiGroup = getElement(this.multiRectGroup);\n            if (!multiGroup) {\n                multiGroup = chart.svgRenderer.createGroup({ id: this.multiRectGroup });\n                chart.svgObject.appendChild(multiGroup);\n            }\n            if (this.rectGrabbing || this.resizing) {\n                var rectElement = void 0;\n                rectElement = getElement(this.draggedRect + this.targetIndex);\n                if (rectElement.nextSibling) {\n                    remove(rectElement.nextSibling);\n                }\n                this.setAttributes(rectElement, dragRect);\n            }\n            else if (!getElement(this.draggedRectGroup + this.count)) {\n                dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup + this.count });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n            }\n            if (!(chart.selectionMode === 'Lasso')) {\n                element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                element.style.cursor = \"move\";\n            }\n            else {\n                element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n            }\n            if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n                getElement(this.draggedRectGroup + this.count).appendChild(element);\n            }\n            else if (!this.rectGrabbing && !this.resizing) {\n                dragGroup.appendChild(element);\n            }\n        }\n        else {\n            var element = isLasso ?\n                getElement(this.lassoPath) : getElement(this.draggedRect);\n            if (this.closeIcon) {\n                removeElement(this.closeIconId);\n            }\n            if (element) {\n                if (isLasso) {\n                    element.setAttribute('d', this.path);\n                }\n                else {\n                    this.setAttributes(element, dragRect);\n                }\n            }\n            else {\n                var dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n                if (!(chart.selectionMode === 'Lasso')) {\n                    element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                }\n                else {\n                    element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n                }\n                dragGroup.appendChild(element);\n            }\n        }\n    };\n    /**\n     * To get drag selected group element index from its id\n     *\n     * @param {string} id element id\n     */\n    Selection.prototype.getIndex = function (id) {\n        var i;\n        for (i = id.length - 1; i > 0; i--) {\n            var x = Number(id[i]);\n            if (!isNaN(x)) {\n                continue;\n            }\n            else {\n                break;\n            }\n        }\n        var index = +id.substr(i + 1, id.length - 1);\n        return index;\n    };\n    Selection.prototype.createCloseButton = function (x, y) {\n        var isMultiDrag = this.chart.allowMultiSelection;\n        var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n        var isDrag = this.rectGrabbing || this.resizing;\n        var closeIcon = this.chart.svgRenderer.createGroup({\n            id: this.closeIconId + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''),\n            style: 'cursor:pointer; visibility: visible;'\n        });\n        closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), '#FFFFFF', { color: circleStroke, width: 1 }, 1, x, y, 10)));\n        var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) +\n            ' L ' + (x + 4) + ' ' + (y - 4);\n        closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n            id: this.closeIconId + '_cross' +\n                (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), d: direction,\n            stroke: circleStroke, 'stroke-width': 2, fill: circleStroke\n        }));\n        this.closeIcon = closeIcon;\n        var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''));\n        if (pathElement) {\n            pathElement.appendChild(closeIcon);\n        }\n    };\n    /**\n     * Method to remove dragged element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.removeDraggedElements = function (chart, event) {\n        if ((event.target.id.indexOf(this.closeIconId) > -1) && (event.type.indexOf('move') === -1)) {\n            var isSelectedvalues = true;\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(event.target.id);\n                var multiRectGroupElement = getElement(this.multiRectGroup);\n                remove(getElement(this.draggedRectGroup + index));\n                this.dragRectArray[index] = null;\n                this.filterArray[index] = null;\n                this.totalSelectedPoints[index] = null;\n                if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n                    removeElement(multiRectGroupElement);\n                    this.dragRectArray = [];\n                    this.filterArray = [];\n                    this.totalSelectedPoints = [];\n                }\n                if (this.currentMode === 'Lasso') {\n                    if (this.multiDataIndexes[index] != null) {\n                        for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n                            this.multiDataIndexes[index][i].isSelect = false;\n                        }\n                    }\n                    this.multiDataIndexes[index] = null;\n                    for (var j = 0; j < this.multiDataIndexes.length; j++) {\n                        if (this.multiDataIndexes[j] != null) {\n                            isSelectedvalues = false;\n                            for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                                this.multiDataIndexes[j][k].isSelect = true;\n                            }\n                        }\n                    }\n                    this.calculateDragSelectedElements(chart, this.dragRect, true);\n                }\n                else if (this.filterArray.length) {\n                    for (var i = 0; i < this.filterArray.length; i++) {\n                        if (this.filterArray[i]) {\n                            isSelectedvalues = false;\n                            this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n                        }\n                    }\n                }\n                else {\n                    this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n                }\n            }\n            else {\n                remove(getElement(this.draggedRectGroup));\n                this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n            }\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n            this.changeCursorStyle(false, chart.svgObject, 'auto');\n            if (!(chart.allowMultiSelection) || isSelectedvalues) {\n                this.rectPoints = null;\n            }\n        }\n    };\n    /**\n     * Method to resize the drag rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n        var rect;\n        if (((chart.allowMultiSelection) && (target.id.indexOf('_ej2_drag_rect') > -1)) ||\n            this.dragRectArray[this.targetIndex]) {\n            if (target.id.indexOf('_ej2_drag_rect') > -1) {\n                this.targetIndex = this.getIndex(target.id);\n            }\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        if (!(chart.allowMultiSelection)) {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        if (rect) {\n            var resize = this.findResizeMode(chart.svgObject, rect, location);\n            if (this.resizing) {\n                rect = getDraggedRectLocation(rect.x, rect.y, (rect.x + rect.width), (rect.y + rect.height), chart.chartAxisLayoutPanel.seriesClipRect);\n                this.drawDraggingRect(chart, rect);\n                this.dragRect = rect;\n            }\n            if (tapped) {\n                this.resizing = resize;\n            }\n        }\n        else {\n            return;\n        }\n    };\n    Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n        var cursorStyle = 'se-resize';\n        var resize = false;\n        if (!this.resizing) {\n            var resizeEdges = [new Rect(rect.x, (rect.y), rect.width - 5, 5),\n                new Rect((rect.x), rect.y, 5, rect.height),\n                new Rect(rect.x, (rect.y + rect.height - 5), rect.width - 5, 5),\n                new Rect((rect.x + rect.width - 5), rect.y + 5, 5, rect.height - 15),\n                new Rect((rect.x + rect.width - 10), (rect.y + rect.height - 10), 10, 10)]; //corner\n            for (var i = 0; i < resizeEdges.length; i++) {\n                if (withInBounds(location.x, location.y, resizeEdges[i])) {\n                    cursorStyle = (i === 4) ? cursorStyle : (i % 2 === 0) ? 'ns-resize' : 'ew-resize';\n                    resize = true;\n                    this.resizeMode = i;\n                    break;\n                }\n            }\n        }\n        else {\n            var x = rect.x;\n            var y = rect.y;\n            var width = (location.x - x);\n            var height = (location.y - y);\n            switch (this.resizeMode) {\n                case 0:\n                    height = Math.abs((rect.height + rect.y) - location.y);\n                    rect.y = Math.min((rect.height + rect.y), location.y);\n                    rect.height = height;\n                    break;\n                case 1:\n                    width = Math.abs((rect.width + rect.x) - location.x);\n                    rect.x = Math.min((rect.width + rect.x), location.x);\n                    rect.width = width;\n                    break;\n                case 2:\n                    rect.height = Math.abs(height);\n                    rect.y = Math.min(location.y, y);\n                    break;\n                case 3:\n                    rect.width = Math.abs(width);\n                    rect.x = Math.min(location.x, x);\n                    break;\n                case 4:\n                    rect.width = Math.abs(width);\n                    rect.height = Math.abs(height);\n                    rect.x = Math.min(location.x, x);\n                    rect.y = Math.min(location.y, y);\n                    break;\n            }\n        }\n        if (this.currentMode !== 'Lasso') {\n            this.changeCursorStyle(resize, getElement((this.chart.allowMultiSelection) ? this.draggedRect +\n                this.targetIndex : this.draggedRect), cursorStyle);\n        }\n        this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n        return resize;\n    };\n    Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n        cursorStyle = isResize ? cursorStyle : (this.control.svgObject === rectelement) ? 'auto' : 'move';\n        if (rectelement) {\n            rectelement.style.cursor = cursorStyle;\n        }\n    };\n    Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n        index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n        var seriesElements;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            seriesElements = this.getSeriesElements(series);\n            this.removeStyles(seriesElements);\n            for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {\n                var seriesElement = seriesElements_2[_a];\n                this.removeStyles(this.getChildren(seriesElement));\n            }\n        }\n    };\n    Selection.prototype.setAttributes = function (ele, object) {\n        var keys = Object.keys(object);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            ele.setAttribute(key, object[key]);\n        }\n    };\n    /**\n     * Method to move the dragged rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n        var rect;\n        if ((this.resizing || this.rectGrabbing) && (chart.allowMultiSelection)) {\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        else {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        rect.x -= (grabbedPoint.x - chart.mouseX);\n        rect.y -= (grabbedPoint.y - chart.mouseY);\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (doDrawing) {\n            this.drawDraggingRect(chart, rect, target);\n        }\n        else {\n            this.calculateDragSelectedElements(chart, rect);\n        }\n    };\n    /**\n     * To complete the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.completeSelection = function (e) {\n        var chart = this.chart;\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        this.currentMode = chart.selectionMode;\n        if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n            this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n        else if (!(chart.allowMultiSelection) && this.rectGrabbing &&\n            this.rectPoints.width && this.rectPoints.height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n            if (this.path.indexOf('L') !== -1) {\n                if (!(chart.allowMultiSelection)) {\n                    getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath));\n                }\n                else if (getElement(this.lassoPath + this.count)) {\n                    getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath + this.count));\n                }\n                if (this.dragging || this.resizing) {\n                    this.calculateDragSelectedElements(chart, this.dragRect);\n                }\n            }\n        }\n        this.dragging = false;\n        this.rectGrabbing = false;\n        this.resizing = false;\n        this.removeDraggedElements(chart, e);\n    };\n    Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n        return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n    };\n    /** @private */\n    Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n        var mode = chart.selectionMode;\n        this.currentMode = chart.selectionMode;\n        this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) &&\n            chart.chartAreaType !== 'PolarRadar';\n        var target = event.target;\n        this.path = undefined;\n        if (this.dragging) {\n            this.count = getElement(this.multiRectGroup) ? (this.count + 1) : 0;\n            this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n            if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > (seriesClipRect.x + seriesClipRect.width) ||\n                chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > (seriesClipRect.y + seriesClipRect.height)) {\n                this.dragging = false;\n            }\n        }\n        if (mode === 'Lasso') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                        var point = _c[_b];\n                        if (!(chart.allowMultiSelection)) {\n                            point.isSelect = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (!(mode === 'Lasso')) {\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n                this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n                this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n            }\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(target.id);\n                this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n                if (this.dragRectArray.length && this.isDragRect(target.id)) {\n                    this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n                    this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n                }\n            }\n        }\n    };\n    Selection.prototype.isDragRect = function (id) {\n        return id.indexOf('_ej2_drag_rect') > -1;\n    };\n    /** @private */\n    Selection.prototype.mouseMove = function (event) {\n        var chart = this.chart;\n        var target = event.target;\n        if (chart.highlightMode !== 'None') {\n            if (!isNullOrUndefined(target)) {\n                if (event.target.id.indexOf('text') > 1) {\n                    target = getElement(event.target.id.replace('text', 'shape'));\n                }\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\n                    target.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(event);\n                return;\n            }\n        }\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        if (event.type === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n            event.preventDefault();\n        }\n        var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (insideMoving) {\n            if (this.rectGrabbing && !this.resizing) {\n                this.draggedRectMoved(chart, this.dragRect, true, target);\n            }\n            else if (this.dragging && !this.resizing) {\n                if (chart.selectionMode === 'Lasso') {\n                    this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n                else {\n                    this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n            }\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n            else if (((chart.allowMultiSelection) && !this.dragging) || this.resizing) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n        }\n        else {\n            this.completeSelection(event);\n        }\n    };\n    Selection.prototype.getPath = function (startX, startY, endX, endY) {\n        if (this.dragging) {\n            if (this.path) {\n                this.path = this.path + ' L' + endX + ' ' + endY;\n            }\n            else {\n                this.path = 'M ' + startX + ' ' + startY;\n            }\n        }\n    };\n    Selection.prototype.pointChecking = function (path) {\n        var _this = this;\n        var chart = this.chart;\n        var element;\n        var svgRect = getElement(chart.svgId).getBoundingClientRect();\n        var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n        var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n        this.multiDataIndexes[this.count] = [];\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            series.points.filter(function (point) {\n                // To check whether the point have symbol location value or not.\n                if (point.symbolLocations && point.symbolLocations.length) {\n                    element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n                }\n                if (element === path) {\n                    point.isSelect = true;\n                    if ((_this.chart.allowMultiSelection) && _this.currentMode === 'Lasso') {\n                        _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n                        _this.seriesIndex++;\n                    }\n                }\n                else if (!(chart.allowMultiSelection)) {\n                    point.isSelect = false;\n                }\n            });\n        }\n        this.seriesIndex = 0;\n    };\n    /**\n     * Get module name.\n     *\n     * @private\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'Selection';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.destroy = function () {\n        this.removeEventListener();\n        // Destroy method performed here\n    };\n    return Selection;\n}(BaseSelection));\nexport { Selection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}